AORB_1:138:java.lang.String_recebePrograma(java.lang.String):j - 1 => j * 1
AORB_2:138:java.lang.String_recebePrograma(java.lang.String):j - 1 => j / 1
AORB_3:138:java.lang.String_recebePrograma(java.lang.String):j - 1 => j % 1
AORB_4:138:java.lang.String_recebePrograma(java.lang.String):j - 1 => j + 1
AORB_5:139:java.lang.String_recebePrograma(java.lang.String):j - 1 => j * 1
AORB_6:139:java.lang.String_recebePrograma(java.lang.String):j - 1 => j / 1
AORB_7:139:java.lang.String_recebePrograma(java.lang.String):j - 1 => j % 1
AORB_8:139:java.lang.String_recebePrograma(java.lang.String):j - 1 => j + 1
AORB_9:142:java.lang.String_recebePrograma(java.lang.String):j - 1 => j * 1
AORB_10:142:java.lang.String_recebePrograma(java.lang.String):j - 1 => j / 1
AORB_11:142:java.lang.String_recebePrograma(java.lang.String):j - 1 => j % 1
AORB_12:142:java.lang.String_recebePrograma(java.lang.String):j - 1 => j + 1
AORB_13:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => j * 1
AORB_14:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => j / 1
AORB_15:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => j % 1
AORB_16:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => j + 1
AORB_17:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => j * 1
AORB_18:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => j / 1
AORB_19:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => j % 1
AORB_20:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => j + 1
AORB_21:146:java.lang.String_recebePrograma(java.lang.String):j - 1 => j * 1
AORB_22:146:java.lang.String_recebePrograma(java.lang.String):j - 1 => j / 1
AORB_23:146:java.lang.String_recebePrograma(java.lang.String):j - 1 => j % 1
AORB_24:146:java.lang.String_recebePrograma(java.lang.String):j - 1 => j + 1
AORB_25:149:java.lang.String_recebePrograma(java.lang.String):i - 1 => i * 1
AORB_26:149:java.lang.String_recebePrograma(java.lang.String):i - 1 => i / 1
AORB_27:149:java.lang.String_recebePrograma(java.lang.String):i - 1 => i % 1
AORB_28:149:java.lang.String_recebePrograma(java.lang.String):i - 1 => i + 1
AORB_29:150:java.lang.String_recebePrograma(java.lang.String):i - 1 => i * 1
AORB_30:150:java.lang.String_recebePrograma(java.lang.String):i - 1 => i / 1
AORB_31:150:java.lang.String_recebePrograma(java.lang.String):i - 1 => i % 1
AORB_32:150:java.lang.String_recebePrograma(java.lang.String):i - 1 => i + 1
AORS_1:96:java.lang.String_recebePrograma(java.lang.String):n++ => n--
AORS_2:100:java.lang.String_recebePrograma(java.lang.String):n++ => n--
AORS_3:104:java.lang.String_recebePrograma(java.lang.String):n++ => n--
AORS_4:106:java.lang.String_recebePrograma(java.lang.String):j++ => j--
AORS_5:110:java.lang.String_recebePrograma(java.lang.String):n++ => n--
AORS_6:112:java.lang.String_recebePrograma(java.lang.String):i++ => i--
AORS_7:116:java.lang.String_recebePrograma(java.lang.String):n++ => n--
AORS_8:120:java.lang.String_recebePrograma(java.lang.String):n++ => n--
AORS_9:125:java.lang.String_recebePrograma(java.lang.String):cont1++ => cont1--
AORS_10:126:java.lang.String_recebePrograma(java.lang.String):contgeral++ => contgeral--
AORS_11:133:java.lang.String_recebePrograma(java.lang.String):contgeral-- => contgeral++
AORS_12:141:java.lang.String_recebePrograma(java.lang.String):n++ => n--
AORS_13:158:java.lang.String_recebePrograma(java.lang.String):++n => n--
AORS_14:158:java.lang.String_recebePrograma(java.lang.String):++n => n++
AORS_15:158:java.lang.String_recebePrograma(java.lang.String):++n => --n
AODU_1:48:java.lang.String_recebePrograma(java.lang.String):-2 => 2
AODU_2:51:java.lang.String_recebePrograma(java.lang.String):-2 => 2
AODS_1:96:java.lang.String_recebePrograma(java.lang.String):n++ => n
AODS_2:100:java.lang.String_recebePrograma(java.lang.String):n++ => n
AODS_3:104:java.lang.String_recebePrograma(java.lang.String):n++ => n
AODS_4:106:java.lang.String_recebePrograma(java.lang.String):j++ => j
AODS_5:110:java.lang.String_recebePrograma(java.lang.String):n++ => n
AODS_6:112:java.lang.String_recebePrograma(java.lang.String):i++ => i
AODS_7:116:java.lang.String_recebePrograma(java.lang.String):n++ => n
AODS_8:120:java.lang.String_recebePrograma(java.lang.String):n++ => n
AODS_9:125:java.lang.String_recebePrograma(java.lang.String):cont1++ => cont1
AODS_10:126:java.lang.String_recebePrograma(java.lang.String):contgeral++ => contgeral
AODS_11:133:java.lang.String_recebePrograma(java.lang.String):contgeral-- => contgeral
AODS_12:141:java.lang.String_recebePrograma(java.lang.String):n++ => n
AODS_13:158:java.lang.String_recebePrograma(java.lang.String):++n => n
AOIU_1:105:java.lang.String_recebePrograma(java.lang.String):n => -n
AOIU_2:111:java.lang.String_recebePrograma(java.lang.String):n => -n
AOIU_3:127:java.lang.String_recebePrograma(java.lang.String):cont1 => -cont1
AOIU_4:128:java.lang.String_recebePrograma(java.lang.String):n => -n
AOIU_5:130:java.lang.String_recebePrograma(java.lang.String):n => -n
AOIU_6:137:java.lang.String_recebePrograma(java.lang.String):valorTopo => -valorTopo
AOIU_7:139:java.lang.String_recebePrograma(java.lang.String):valorTopo => -valorTopo
AOIU_8:139:java.lang.String_recebePrograma(java.lang.String):j => -j
AOIU_9:140:java.lang.String_recebePrograma(java.lang.String):antPosicaoj => -antPosicaoj
AOIU_10:140:java.lang.String_recebePrograma(java.lang.String):j => -j
AOIU_11:142:java.lang.String_recebePrograma(java.lang.String):n => -n
AOIU_12:143:java.lang.String_recebePrograma(java.lang.String):j => -j
AOIU_13:144:java.lang.String_recebePrograma(java.lang.String):j => -j
AOIU_14:146:java.lang.String_recebePrograma(java.lang.String):valorAtual => -valorAtual
AOIU_15:150:java.lang.String_recebePrograma(java.lang.String):valorTopo => -valorTopo
AOIU_16:150:java.lang.String_recebePrograma(java.lang.String):i => -i
AOIU_17:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual => -antvalorAtual
AOIU_18:156:java.lang.String_recebePrograma(java.lang.String):contgeral => -contgeral
AOIU_19:157:java.lang.String_recebePrograma(java.lang.String):flag => -flag
AOIU_20:161:java.lang.String_recebePrograma(java.lang.String):valorAtual => -valorAtual
AOIS_1:105:java.lang.String_recebePrograma(java.lang.String):n => ++n
AOIS_2:105:java.lang.String_recebePrograma(java.lang.String):n => --n
AOIS_3:105:java.lang.String_recebePrograma(java.lang.String):n => n++
AOIS_4:105:java.lang.String_recebePrograma(java.lang.String):n => n--
AOIS_5:111:java.lang.String_recebePrograma(java.lang.String):n => ++n
AOIS_6:111:java.lang.String_recebePrograma(java.lang.String):n => --n
AOIS_7:111:java.lang.String_recebePrograma(java.lang.String):n => n++
AOIS_8:111:java.lang.String_recebePrograma(java.lang.String):n => n--
AOIS_9:127:java.lang.String_recebePrograma(java.lang.String):cont1 => ++cont1
AOIS_10:127:java.lang.String_recebePrograma(java.lang.String):cont1 => --cont1
AOIS_11:127:java.lang.String_recebePrograma(java.lang.String):cont1 => cont1++
AOIS_12:127:java.lang.String_recebePrograma(java.lang.String):cont1 => cont1--
AOIS_13:128:java.lang.String_recebePrograma(java.lang.String):n => n++
AOIS_14:128:java.lang.String_recebePrograma(java.lang.String):n => n--
AOIS_15:130:java.lang.String_recebePrograma(java.lang.String):n => ++n
AOIS_16:130:java.lang.String_recebePrograma(java.lang.String):n => --n
AOIS_17:130:java.lang.String_recebePrograma(java.lang.String):n => n++
AOIS_18:130:java.lang.String_recebePrograma(java.lang.String):n => n--
AOIS_19:136:java.lang.String_recebePrograma(java.lang.String):valorAtual => ++valorAtual
AOIS_20:136:java.lang.String_recebePrograma(java.lang.String):valorAtual => --valorAtual
AOIS_21:136:java.lang.String_recebePrograma(java.lang.String):valorAtual => valorAtual++
AOIS_22:136:java.lang.String_recebePrograma(java.lang.String):valorAtual => valorAtual--
AOIS_23:136:java.lang.String_recebePrograma(java.lang.String):valorTopo => ++valorTopo
AOIS_24:136:java.lang.String_recebePrograma(java.lang.String):valorTopo => --valorTopo
AOIS_25:136:java.lang.String_recebePrograma(java.lang.String):valorTopo => valorTopo++
AOIS_26:136:java.lang.String_recebePrograma(java.lang.String):valorTopo => valorTopo--
AOIS_27:137:java.lang.String_recebePrograma(java.lang.String):valorTopo => ++valorTopo
AOIS_28:137:java.lang.String_recebePrograma(java.lang.String):valorTopo => --valorTopo
AOIS_29:137:java.lang.String_recebePrograma(java.lang.String):valorTopo => valorTopo++
AOIS_30:137:java.lang.String_recebePrograma(java.lang.String):valorTopo => valorTopo--
AOIS_31:137:java.lang.String_recebePrograma(java.lang.String):valorAtual => valorAtual++
AOIS_32:137:java.lang.String_recebePrograma(java.lang.String):valorAtual => valorAtual--
AOIS_33:138:java.lang.String_recebePrograma(java.lang.String):j => ++j
AOIS_34:138:java.lang.String_recebePrograma(java.lang.String):j => --j
AOIS_35:138:java.lang.String_recebePrograma(java.lang.String):j => j++
AOIS_36:138:java.lang.String_recebePrograma(java.lang.String):j => j--
AOIS_37:138:java.lang.String_recebePrograma(java.lang.String):j => ++j
AOIS_38:138:java.lang.String_recebePrograma(java.lang.String):j => --j
AOIS_39:138:java.lang.String_recebePrograma(java.lang.String):j => j++
AOIS_40:138:java.lang.String_recebePrograma(java.lang.String):j => j--
AOIS_41:139:java.lang.String_recebePrograma(java.lang.String):valorTopo => ++valorTopo
AOIS_42:139:java.lang.String_recebePrograma(java.lang.String):valorTopo => --valorTopo
AOIS_43:139:java.lang.String_recebePrograma(java.lang.String):valorTopo => valorTopo++
AOIS_44:139:java.lang.String_recebePrograma(java.lang.String):valorTopo => valorTopo--
AOIS_45:139:java.lang.String_recebePrograma(java.lang.String):j => ++j
AOIS_46:139:java.lang.String_recebePrograma(java.lang.String):j => --j
AOIS_47:139:java.lang.String_recebePrograma(java.lang.String):j => j++
AOIS_48:139:java.lang.String_recebePrograma(java.lang.String):j => j--
AOIS_49:140:java.lang.String_recebePrograma(java.lang.String):antPosicaoj => ++antPosicaoj
AOIS_50:140:java.lang.String_recebePrograma(java.lang.String):antPosicaoj => --antPosicaoj
AOIS_51:140:java.lang.String_recebePrograma(java.lang.String):antPosicaoj => antPosicaoj++
AOIS_52:140:java.lang.String_recebePrograma(java.lang.String):antPosicaoj => antPosicaoj--
AOIS_53:140:java.lang.String_recebePrograma(java.lang.String):j => ++j
AOIS_54:140:java.lang.String_recebePrograma(java.lang.String):j => --j
AOIS_55:140:java.lang.String_recebePrograma(java.lang.String):j => j++
AOIS_56:140:java.lang.String_recebePrograma(java.lang.String):j => j--
AOIS_57:142:java.lang.String_recebePrograma(java.lang.String):n => ++n
AOIS_58:142:java.lang.String_recebePrograma(java.lang.String):n => --n
AOIS_59:142:java.lang.String_recebePrograma(java.lang.String):n => n++
AOIS_60:142:java.lang.String_recebePrograma(java.lang.String):n => n--
AOIS_61:143:java.lang.String_recebePrograma(java.lang.String):j => ++j
AOIS_62:143:java.lang.String_recebePrograma(java.lang.String):j => --j
AOIS_63:143:java.lang.String_recebePrograma(java.lang.String):j => j++
AOIS_64:143:java.lang.String_recebePrograma(java.lang.String):j => j--
AOIS_65:144:java.lang.String_recebePrograma(java.lang.String):j => ++j
AOIS_66:144:java.lang.String_recebePrograma(java.lang.String):j => --j
AOIS_67:144:java.lang.String_recebePrograma(java.lang.String):j => j++
AOIS_68:144:java.lang.String_recebePrograma(java.lang.String):j => j--
AOIS_69:144:java.lang.String_recebePrograma(java.lang.String):j => ++j
AOIS_70:144:java.lang.String_recebePrograma(java.lang.String):j => --j
AOIS_71:144:java.lang.String_recebePrograma(java.lang.String):j => j++
AOIS_72:144:java.lang.String_recebePrograma(java.lang.String):j => j--
AOIS_73:146:java.lang.String_recebePrograma(java.lang.String):valorAtual => ++valorAtual
AOIS_74:146:java.lang.String_recebePrograma(java.lang.String):valorAtual => --valorAtual
AOIS_75:146:java.lang.String_recebePrograma(java.lang.String):valorAtual => valorAtual++
AOIS_76:146:java.lang.String_recebePrograma(java.lang.String):valorAtual => valorAtual--
AOIS_77:146:java.lang.String_recebePrograma(java.lang.String):j => ++j
AOIS_78:146:java.lang.String_recebePrograma(java.lang.String):j => --j
AOIS_79:146:java.lang.String_recebePrograma(java.lang.String):j => j++
AOIS_80:146:java.lang.String_recebePrograma(java.lang.String):j => j--
AOIS_81:149:java.lang.String_recebePrograma(java.lang.String):i => ++i
AOIS_82:149:java.lang.String_recebePrograma(java.lang.String):i => --i
AOIS_83:149:java.lang.String_recebePrograma(java.lang.String):i => i++
AOIS_84:149:java.lang.String_recebePrograma(java.lang.String):i => i--
AOIS_85:149:java.lang.String_recebePrograma(java.lang.String):i => ++i
AOIS_86:149:java.lang.String_recebePrograma(java.lang.String):i => --i
AOIS_87:149:java.lang.String_recebePrograma(java.lang.String):i => i++
AOIS_88:149:java.lang.String_recebePrograma(java.lang.String):i => i--
AOIS_89:150:java.lang.String_recebePrograma(java.lang.String):valorTopo => ++valorTopo
AOIS_90:150:java.lang.String_recebePrograma(java.lang.String):valorTopo => --valorTopo
AOIS_91:150:java.lang.String_recebePrograma(java.lang.String):valorTopo => valorTopo++
AOIS_92:150:java.lang.String_recebePrograma(java.lang.String):valorTopo => valorTopo--
AOIS_93:150:java.lang.String_recebePrograma(java.lang.String):i => ++i
AOIS_94:150:java.lang.String_recebePrograma(java.lang.String):i => --i
AOIS_95:150:java.lang.String_recebePrograma(java.lang.String):i => i++
AOIS_96:150:java.lang.String_recebePrograma(java.lang.String):i => i--
AOIS_97:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual => ++antvalorAtual
AOIS_98:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual => --antvalorAtual
AOIS_99:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual => antvalorAtual++
AOIS_100:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual => antvalorAtual--
AOIS_101:151:java.lang.String_recebePrograma(java.lang.String):valorTopo => valorTopo++
AOIS_102:151:java.lang.String_recebePrograma(java.lang.String):valorTopo => valorTopo--
AOIS_103:156:java.lang.String_recebePrograma(java.lang.String):contgeral => ++contgeral
AOIS_104:156:java.lang.String_recebePrograma(java.lang.String):contgeral => --contgeral
AOIS_105:156:java.lang.String_recebePrograma(java.lang.String):contgeral => contgeral++
AOIS_106:156:java.lang.String_recebePrograma(java.lang.String):contgeral => contgeral--
AOIS_107:157:java.lang.String_recebePrograma(java.lang.String):flag => ++flag
AOIS_108:157:java.lang.String_recebePrograma(java.lang.String):flag => --flag
AOIS_109:157:java.lang.String_recebePrograma(java.lang.String):flag => flag++
AOIS_110:157:java.lang.String_recebePrograma(java.lang.String):flag => flag--
AOIS_111:161:java.lang.String_recebePrograma(java.lang.String):valorAtual => ++valorAtual
AOIS_112:161:java.lang.String_recebePrograma(java.lang.String):valorAtual => --valorAtual
AOIS_113:161:java.lang.String_recebePrograma(java.lang.String):valorAtual => valorAtual++
AOIS_114:161:java.lang.String_recebePrograma(java.lang.String):valorAtual => valorAtual--
AOIS_115:161:java.lang.String_recebePrograma(java.lang.String):estadoFinal => estadoFinal++
AOIS_116:161:java.lang.String_recebePrograma(java.lang.String):estadoFinal => estadoFinal--
ROR_1:127:java.lang.String_recebePrograma(java.lang.String): cont1 > 0  =>   cont1 >= 0
ROR_2:127:java.lang.String_recebePrograma(java.lang.String): cont1 > 0  =>   cont1 < 0
ROR_3:127:java.lang.String_recebePrograma(java.lang.String): cont1 > 0  =>   cont1 <= 0
ROR_4:127:java.lang.String_recebePrograma(java.lang.String): cont1 > 0  =>   cont1 == 0
ROR_5:127:java.lang.String_recebePrograma(java.lang.String): cont1 > 0  =>   cont1 != 0
ROR_6:127:java.lang.String_recebePrograma(java.lang.String): cont1 > 0  =>   true
ROR_7:127:java.lang.String_recebePrograma(java.lang.String): cont1 > 0  =>   false
ROR_8:136:java.lang.String_recebePrograma(java.lang.String): valorAtual != 0  =>   valorAtual > 0
ROR_9:136:java.lang.String_recebePrograma(java.lang.String): valorAtual != 0  =>   valorAtual >= 0
ROR_10:136:java.lang.String_recebePrograma(java.lang.String): valorAtual != 0  =>   valorAtual < 0
ROR_11:136:java.lang.String_recebePrograma(java.lang.String): valorAtual != 0  =>   valorAtual <= 0
ROR_12:136:java.lang.String_recebePrograma(java.lang.String): valorAtual != 0  =>   valorAtual == 0
ROR_13:136:java.lang.String_recebePrograma(java.lang.String): valorAtual != 0  =>   true
ROR_14:136:java.lang.String_recebePrograma(java.lang.String): valorAtual != 0  =>   false
ROR_15:136:java.lang.String_recebePrograma(java.lang.String): valorTopo != 0  =>   valorTopo > 0
ROR_16:136:java.lang.String_recebePrograma(java.lang.String): valorTopo != 0  =>   valorTopo >= 0
ROR_17:136:java.lang.String_recebePrograma(java.lang.String): valorTopo != 0  =>   valorTopo < 0
ROR_18:136:java.lang.String_recebePrograma(java.lang.String): valorTopo != 0  =>   valorTopo <= 0
ROR_19:136:java.lang.String_recebePrograma(java.lang.String): valorTopo != 0  =>   valorTopo == 0
ROR_20:136:java.lang.String_recebePrograma(java.lang.String): valorTopo != 0  =>   true
ROR_21:136:java.lang.String_recebePrograma(java.lang.String): valorTopo != 0  =>   false
ROR_22:138:java.lang.String_recebePrograma(java.lang.String): j > 0  =>   j >= 0
ROR_23:138:java.lang.String_recebePrograma(java.lang.String): j > 0  =>   j < 0
ROR_24:138:java.lang.String_recebePrograma(java.lang.String): j > 0  =>   j <= 0
ROR_25:138:java.lang.String_recebePrograma(java.lang.String): j > 0  =>   j == 0
ROR_26:138:java.lang.String_recebePrograma(java.lang.String): j > 0  =>   j != 0
ROR_27:138:java.lang.String_recebePrograma(java.lang.String): j > 0  =>   true
ROR_28:138:java.lang.String_recebePrograma(java.lang.String): j > 0  =>   false
ROR_29:138:java.lang.String_recebePrograma(java.lang.String): posifor[j - 1] != 0  =>   posifor[j - 1] > 0
ROR_30:138:java.lang.String_recebePrograma(java.lang.String): posifor[j - 1] != 0  =>   posifor[j - 1] >= 0
ROR_31:138:java.lang.String_recebePrograma(java.lang.String): posifor[j - 1] != 0  =>   posifor[j - 1] < 0
ROR_32:138:java.lang.String_recebePrograma(java.lang.String): posifor[j - 1] != 0  =>   posifor[j - 1] <= 0
ROR_33:138:java.lang.String_recebePrograma(java.lang.String): posifor[j - 1] != 0  =>   posifor[j - 1] == 0
ROR_34:138:java.lang.String_recebePrograma(java.lang.String): posifor[j - 1] != 0  =>   true
ROR_35:138:java.lang.String_recebePrograma(java.lang.String): posifor[j - 1] != 0  =>   false
ROR_36:139:java.lang.String_recebePrograma(java.lang.String): valorTopo == posifor[j - 1]  =>   valorTopo > posifor[j - 1]
ROR_37:139:java.lang.String_recebePrograma(java.lang.String): valorTopo == posifor[j - 1]  =>   valorTopo >= posifor[j - 1]
ROR_38:139:java.lang.String_recebePrograma(java.lang.String): valorTopo == posifor[j - 1]  =>   valorTopo < posifor[j - 1]
ROR_39:139:java.lang.String_recebePrograma(java.lang.String): valorTopo == posifor[j - 1]  =>   valorTopo <= posifor[j - 1]
ROR_40:139:java.lang.String_recebePrograma(java.lang.String): valorTopo == posifor[j - 1]  =>   valorTopo != posifor[j - 1]
ROR_41:139:java.lang.String_recebePrograma(java.lang.String): valorTopo == posifor[j - 1]  =>   true
ROR_42:139:java.lang.String_recebePrograma(java.lang.String): valorTopo == posifor[j - 1]  =>   false
ROR_43:140:java.lang.String_recebePrograma(java.lang.String): antPosicaoj != j  =>   antPosicaoj > j
ROR_44:140:java.lang.String_recebePrograma(java.lang.String): antPosicaoj != j  =>   antPosicaoj >= j
ROR_45:140:java.lang.String_recebePrograma(java.lang.String): antPosicaoj != j  =>   antPosicaoj < j
ROR_46:140:java.lang.String_recebePrograma(java.lang.String): antPosicaoj != j  =>   antPosicaoj <= j
ROR_47:140:java.lang.String_recebePrograma(java.lang.String): antPosicaoj != j  =>   antPosicaoj == j
ROR_48:140:java.lang.String_recebePrograma(java.lang.String): antPosicaoj != j  =>   true
ROR_49:140:java.lang.String_recebePrograma(java.lang.String): antPosicaoj != j  =>   false
ROR_50:149:java.lang.String_recebePrograma(java.lang.String): i > 0  =>   i >= 0
ROR_51:149:java.lang.String_recebePrograma(java.lang.String): i > 0  =>   i < 0
ROR_52:149:java.lang.String_recebePrograma(java.lang.String): i > 0  =>   i <= 0
ROR_53:149:java.lang.String_recebePrograma(java.lang.String): i > 0  =>   i == 0
ROR_54:149:java.lang.String_recebePrograma(java.lang.String): i > 0  =>   i != 0
ROR_55:149:java.lang.String_recebePrograma(java.lang.String): i > 0  =>   true
ROR_56:149:java.lang.String_recebePrograma(java.lang.String): i > 0  =>   false
ROR_57:149:java.lang.String_recebePrograma(java.lang.String): posiWhile[i - 1] != 0  =>   posiWhile[i - 1] > 0
ROR_58:149:java.lang.String_recebePrograma(java.lang.String): posiWhile[i - 1] != 0  =>   posiWhile[i - 1] >= 0
ROR_59:149:java.lang.String_recebePrograma(java.lang.String): posiWhile[i - 1] != 0  =>   posiWhile[i - 1] < 0
ROR_60:149:java.lang.String_recebePrograma(java.lang.String): posiWhile[i - 1] != 0  =>   posiWhile[i - 1] <= 0
ROR_61:149:java.lang.String_recebePrograma(java.lang.String): posiWhile[i - 1] != 0  =>   posiWhile[i - 1] == 0
ROR_62:149:java.lang.String_recebePrograma(java.lang.String): posiWhile[i - 1] != 0  =>   true
ROR_63:149:java.lang.String_recebePrograma(java.lang.String): posiWhile[i - 1] != 0  =>   false
ROR_64:150:java.lang.String_recebePrograma(java.lang.String): valorTopo == posiWhile[i - 1]  =>   valorTopo > posiWhile[i - 1]
ROR_65:150:java.lang.String_recebePrograma(java.lang.String): valorTopo == posiWhile[i - 1]  =>   valorTopo >= posiWhile[i - 1]
ROR_66:150:java.lang.String_recebePrograma(java.lang.String): valorTopo == posiWhile[i - 1]  =>   valorTopo < posiWhile[i - 1]
ROR_67:150:java.lang.String_recebePrograma(java.lang.String): valorTopo == posiWhile[i - 1]  =>   valorTopo <= posiWhile[i - 1]
ROR_68:150:java.lang.String_recebePrograma(java.lang.String): valorTopo == posiWhile[i - 1]  =>   valorTopo != posiWhile[i - 1]
ROR_69:150:java.lang.String_recebePrograma(java.lang.String): valorTopo == posiWhile[i - 1]  =>   true
ROR_70:150:java.lang.String_recebePrograma(java.lang.String): valorTopo == posiWhile[i - 1]  =>   false
ROR_71:156:java.lang.String_recebePrograma(java.lang.String): contgeral == 0  =>   contgeral > 0
ROR_72:156:java.lang.String_recebePrograma(java.lang.String): contgeral == 0  =>   contgeral >= 0
ROR_73:156:java.lang.String_recebePrograma(java.lang.String): contgeral == 0  =>   contgeral < 0
ROR_74:156:java.lang.String_recebePrograma(java.lang.String): contgeral == 0  =>   contgeral <= 0
ROR_75:156:java.lang.String_recebePrograma(java.lang.String): contgeral == 0  =>   contgeral != 0
ROR_76:156:java.lang.String_recebePrograma(java.lang.String): contgeral == 0  =>   true
ROR_77:156:java.lang.String_recebePrograma(java.lang.String): contgeral == 0  =>   false
ROR_78:157:java.lang.String_recebePrograma(java.lang.String): flag == 0  =>   flag > 0
ROR_79:157:java.lang.String_recebePrograma(java.lang.String): flag == 0  =>   flag >= 0
ROR_80:157:java.lang.String_recebePrograma(java.lang.String): flag == 0  =>   flag < 0
ROR_81:157:java.lang.String_recebePrograma(java.lang.String): flag == 0  =>   flag <= 0
ROR_82:157:java.lang.String_recebePrograma(java.lang.String): flag == 0  =>   flag != 0
ROR_83:157:java.lang.String_recebePrograma(java.lang.String): flag == 0  =>   true
ROR_84:157:java.lang.String_recebePrograma(java.lang.String): flag == 0  =>   false
COR_1:136:java.lang.String_recebePrograma(java.lang.String): valorAtual != 0 && valorTopo != 0  =>   valorAtual != 0 || valorTopo != 0
COR_2:136:java.lang.String_recebePrograma(java.lang.String): valorAtual != 0 && valorTopo != 0  =>   valorAtual != 0 ^ valorTopo != 0
COR_3:138:java.lang.String_recebePrograma(java.lang.String): j > 0 && posifor[j - 1] != 0  =>   j > 0 || posifor[j - 1] != 0
COR_4:138:java.lang.String_recebePrograma(java.lang.String): j > 0 && posifor[j - 1] != 0  =>   j > 0 ^ posifor[j - 1] != 0
COR_5:149:java.lang.String_recebePrograma(java.lang.String): i > 0 && posiWhile[i - 1] != 0  =>   i > 0 || posiWhile[i - 1] != 0
COR_6:149:java.lang.String_recebePrograma(java.lang.String): i > 0 && posiWhile[i - 1] != 0  =>   i > 0 ^ posiWhile[i - 1] != 0
COI_1:127:java.lang.String_recebePrograma(java.lang.String): cont1 > 0  =>  !(cont1 > 0)
COI_2:136:java.lang.String_recebePrograma(java.lang.String): valorAtual != 0  =>  !(valorAtual != 0)
COI_3:136:java.lang.String_recebePrograma(java.lang.String): valorTopo != 0  =>  !(valorTopo != 0)
COI_4:136:java.lang.String_recebePrograma(java.lang.String): valorAtual != 0 && valorTopo != 0  =>  !(valorAtual != 0 && valorTopo != 0)
COI_5:138:java.lang.String_recebePrograma(java.lang.String): j > 0  =>  !(j > 0)
COI_6:138:java.lang.String_recebePrograma(java.lang.String): posifor[j - 1] != 0  =>  !(posifor[j - 1] != 0)
COI_7:138:java.lang.String_recebePrograma(java.lang.String): j > 0 && posifor[j - 1] != 0  =>  !(j > 0 && posifor[j - 1] != 0)
COI_8:139:java.lang.String_recebePrograma(java.lang.String): valorTopo == posifor[j - 1]  =>  !(valorTopo == posifor[j - 1])
COI_9:140:java.lang.String_recebePrograma(java.lang.String): antPosicaoj != j  =>  !(antPosicaoj != j)
COI_10:149:java.lang.String_recebePrograma(java.lang.String): i > 0  =>  !(i > 0)
COI_11:149:java.lang.String_recebePrograma(java.lang.String): posiWhile[i - 1] != 0  =>  !(posiWhile[i - 1] != 0)
COI_12:149:java.lang.String_recebePrograma(java.lang.String): i > 0 && posiWhile[i - 1] != 0  =>  !(i > 0 && posiWhile[i - 1] != 0)
COI_13:150:java.lang.String_recebePrograma(java.lang.String): valorTopo == posiWhile[i - 1]  =>  !(valorTopo == posiWhile[i - 1])
COI_14:156:java.lang.String_recebePrograma(java.lang.String): contgeral == 0  =>  !(contgeral == 0)
COI_15:157:java.lang.String_recebePrograma(java.lang.String): flag == 0  =>  !(flag == 0)
LOI_1:96:java.lang.String_recebePrograma(java.lang.String):n => ~n
LOI_2:100:java.lang.String_recebePrograma(java.lang.String):n => ~n
LOI_3:104:java.lang.String_recebePrograma(java.lang.String):n => ~n
LOI_4:105:java.lang.String_recebePrograma(java.lang.String):j => ~j
LOI_5:105:java.lang.String_recebePrograma(java.lang.String):n => ~n
LOI_6:106:java.lang.String_recebePrograma(java.lang.String):j => ~j
LOI_7:110:java.lang.String_recebePrograma(java.lang.String):n => ~n
LOI_8:111:java.lang.String_recebePrograma(java.lang.String):i => ~i
LOI_9:111:java.lang.String_recebePrograma(java.lang.String):n => ~n
LOI_10:112:java.lang.String_recebePrograma(java.lang.String):i => ~i
LOI_11:116:java.lang.String_recebePrograma(java.lang.String):n => ~n
LOI_12:120:java.lang.String_recebePrograma(java.lang.String):n => ~n
LOI_13:125:java.lang.String_recebePrograma(java.lang.String):cont1 => ~cont1
LOI_14:126:java.lang.String_recebePrograma(java.lang.String):contgeral => ~contgeral
LOI_15:127:java.lang.String_recebePrograma(java.lang.String):cont1 => ~cont1
LOI_16:128:java.lang.String_recebePrograma(java.lang.String):n => ~n
LOI_17:130:java.lang.String_recebePrograma(java.lang.String):n => ~n
LOI_18:133:java.lang.String_recebePrograma(java.lang.String):contgeral => ~contgeral
LOI_19:136:java.lang.String_recebePrograma(java.lang.String):valorAtual => ~valorAtual
LOI_20:136:java.lang.String_recebePrograma(java.lang.String):valorTopo => ~valorTopo
LOI_21:137:java.lang.String_recebePrograma(java.lang.String):valorTopo => ~valorTopo
LOI_22:137:java.lang.String_recebePrograma(java.lang.String):valorAtual => ~valorAtual
LOI_23:138:java.lang.String_recebePrograma(java.lang.String):j => ~j
LOI_24:138:java.lang.String_recebePrograma(java.lang.String):j => ~j
LOI_25:139:java.lang.String_recebePrograma(java.lang.String):valorTopo => ~valorTopo
LOI_26:139:java.lang.String_recebePrograma(java.lang.String):j => ~j
LOI_27:140:java.lang.String_recebePrograma(java.lang.String):antPosicaoj => ~antPosicaoj
LOI_28:140:java.lang.String_recebePrograma(java.lang.String):j => ~j
LOI_29:141:java.lang.String_recebePrograma(java.lang.String):n => ~n
LOI_30:142:java.lang.String_recebePrograma(java.lang.String):j => ~j
LOI_31:142:java.lang.String_recebePrograma(java.lang.String):n => ~n
LOI_32:143:java.lang.String_recebePrograma(java.lang.String):j => ~j
LOI_33:144:java.lang.String_recebePrograma(java.lang.String):j => ~j
LOI_34:144:java.lang.String_recebePrograma(java.lang.String):j => ~j
LOI_35:146:java.lang.String_recebePrograma(java.lang.String):valorAtual => ~valorAtual
LOI_36:146:java.lang.String_recebePrograma(java.lang.String):j => ~j
LOI_37:149:java.lang.String_recebePrograma(java.lang.String):i => ~i
LOI_38:149:java.lang.String_recebePrograma(java.lang.String):i => ~i
LOI_39:150:java.lang.String_recebePrograma(java.lang.String):valorTopo => ~valorTopo
LOI_40:150:java.lang.String_recebePrograma(java.lang.String):i => ~i
LOI_41:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual => ~antvalorAtual
LOI_42:151:java.lang.String_recebePrograma(java.lang.String):valorTopo => ~valorTopo
LOI_43:156:java.lang.String_recebePrograma(java.lang.String):contgeral => ~contgeral
LOI_44:157:java.lang.String_recebePrograma(java.lang.String):flag => ~flag
LOI_45:158:java.lang.String_recebePrograma(java.lang.String):n => ~n
LOI_46:161:java.lang.String_recebePrograma(java.lang.String):valorAtual => ~valorAtual
LOI_47:161:java.lang.String_recebePrograma(java.lang.String):estadoFinal => ~estadoFinal
SDL_1:171:java.lang.String_recebePrograma(java.lang.String): int n = 1; java.lang.String testador; int cont1 = -2; int valorTopo; int valorAtual; int contgeral = -2; int antvalorTopo = 0; int antvalorAtual = 0; int flag = 0; int estadoFinal = 0; int antPosicaoj = 0; int[] posiWhile = new int[10]; int[] posifor = new int[10]; int[] atulposiFor = new int[10]; java.lang.StringBuilder ligVertices = new java.lang.StringBuilder(); ligVertices.append( \"digraph {\\n\" ); int i = 0; int j = 0; Gfc.Pilha st = new Gfc.Pilha(); java.util.Stack pilha = new java.util.Stack(); st.inserePilha( pilha, 1 ); java.util.StringTokenizer token = new java.util.StringTokenizer( programa ); while (token.hasMoreElements()) {     testador = token.nextElement().toString();     switch (testador) {     case \"boolen\" :         break;     case \"byte\" :         break;     case \"short\" :         break;     case \"int\" :         break;     case \"long\" :         break;     case \"float\" :         break;     case \"double\" :         break;     case \"String\" :         break;     case \"if\" :         n++;         break;     case \"else\" :         n++;         break;     case \"for\" :         n++;         posifor[j] = n;         j++;         break;     case \"while\" :         n++;         posiWhile[i] = n;         i++;         break;     case \"try\" :         n++;         break;     case \"catch\" :         n++;         break;     default  :         if (testador.equals( \"{\" )) {             cont1++;             contgeral++;             if (cont1 > 0) {                 st.inserePilha( pilha, n );             }             antvalorAtual = n;         } else {             if (testador.equals( \"}\" )) {                 contgeral--;                 valorAtual = st.removePilha( pilha );                 valorTopo = st.vertopo( pilha );                 if (valorAtual != 0 && valorTopo != 0) {                     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                     if (j > 0 && posifor[j - 1] != 0) {                         if (valorTopo == posifor[j - 1]) {                             if (antPosicaoj != j) {                                 n++;                                 atulposiFor[j - 1] = n;                                 antPosicaoj = j;                                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                             }                             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                         }                     } else {                         if (i > 0 && posiWhile[i - 1] != 0) {                             if (valorTopo == posiWhile[i - 1]) {                                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                             }                         }                     }                 }                 if (contgeral == 0) {                     if (flag == 0) {                         estadoFinal = ++n;                         flag = 1;                     }                     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );                 }             }         }         break;     } } ligVertices.append( \"}\" ); System.out.println( ligVertices.toString() ); return ligVertices.toString();  =>   int n = 1; java.lang.String testador; int cont1 = -2; int valorTopo; int valorAtual; int contgeral = -2; int antvalorTopo = 0; int antvalorAtual = 0; int flag = 0; int estadoFinal = 0; int antPosicaoj = 0; int[] posiWhile = new int[10]; int[] posifor = new int[10]; int[] atulposiFor = new int[10]; java.lang.StringBuilder ligVertices = new java.lang.StringBuilder(); int i = 0; int j = 0; Gfc.Pilha st = new Gfc.Pilha(); java.util.Stack pilha = new java.util.Stack(); st.inserePilha( pilha, 1 ); java.util.StringTokenizer token = new java.util.StringTokenizer( programa ); while (token.hasMoreElements()) {     testador = token.nextElement().toString();     switch (testador) {     case \"boolen\" :         break;     case \"byte\" :         break;     case \"short\" :         break;     case \"int\" :         break;     case \"long\" :         break;     case \"float\" :         break;     case \"double\" :         break;     case \"String\" :         break;     case \"if\" :         n++;         break;     case \"else\" :         n++;         break;     case \"for\" :         n++;         posifor[j] = n;         j++;         break;     case \"while\" :         n++;         posiWhile[i] = n;         i++;         break;     case \"try\" :         n++;         break;     case \"catch\" :         n++;         break;     default  :         if (testador.equals( \"{\" )) {             cont1++;             contgeral++;             if (cont1 > 0) {                 st.inserePilha( pilha, n );             }             antvalorAtual = n;         } else {             if (testador.equals( \"}\" )) {                 contgeral--;                 valorAtual = st.removePilha( pilha );                 valorTopo = st.vertopo( pilha );                 if (valorAtual != 0 && valorTopo != 0) {                     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                     if (j > 0 && posifor[j - 1] != 0) {                         if (valorTopo == posifor[j - 1]) {                             if (antPosicaoj != j) {                                 n++;                                 atulposiFor[j - 1] = n;                                 antPosicaoj = j;                                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                             }                             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                         }                     } else {                         if (i > 0 && posiWhile[i - 1] != 0) {                             if (valorTopo == posiWhile[i - 1]) {                                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                             }                         }                     }                 }                 if (contgeral == 0) {                     if (flag == 0) {                         estadoFinal = ++n;                         flag = 1;                     }                     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );                 }             }         }         break;     } } ligVertices.append( \"}\" ); System.out.println( ligVertices.toString() ); return ligVertices.toString();
SDL_2:171:java.lang.String_recebePrograma(java.lang.String): int n = 1; java.lang.String testador; int cont1 = -2; int valorTopo; int valorAtual; int contgeral = -2; int antvalorTopo = 0; int antvalorAtual = 0; int flag = 0; int estadoFinal = 0; int antPosicaoj = 0; int[] posiWhile = new int[10]; int[] posifor = new int[10]; int[] atulposiFor = new int[10]; java.lang.StringBuilder ligVertices = new java.lang.StringBuilder(); ligVertices.append( \"digraph {\\n\" ); int i = 0; int j = 0; Gfc.Pilha st = new Gfc.Pilha(); java.util.Stack pilha = new java.util.Stack(); st.inserePilha( pilha, 1 ); java.util.StringTokenizer token = new java.util.StringTokenizer( programa ); while (token.hasMoreElements()) {     testador = token.nextElement().toString();     switch (testador) {     case \"boolen\" :         break;     case \"byte\" :         break;     case \"short\" :         break;     case \"int\" :         break;     case \"long\" :         break;     case \"float\" :         break;     case \"double\" :         break;     case \"String\" :         break;     case \"if\" :         n++;         break;     case \"else\" :         n++;         break;     case \"for\" :         n++;         posifor[j] = n;         j++;         break;     case \"while\" :         n++;         posiWhile[i] = n;         i++;         break;     case \"try\" :         n++;         break;     case \"catch\" :         n++;         break;     default  :         if (testador.equals( \"{\" )) {             cont1++;             contgeral++;             if (cont1 > 0) {                 st.inserePilha( pilha, n );             }             antvalorAtual = n;         } else {             if (testador.equals( \"}\" )) {                 contgeral--;                 valorAtual = st.removePilha( pilha );                 valorTopo = st.vertopo( pilha );                 if (valorAtual != 0 && valorTopo != 0) {                     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                     if (j > 0 && posifor[j - 1] != 0) {                         if (valorTopo == posifor[j - 1]) {                             if (antPosicaoj != j) {                                 n++;                                 atulposiFor[j - 1] = n;                                 antPosicaoj = j;                                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                             }                             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                         }                     } else {                         if (i > 0 && posiWhile[i - 1] != 0) {                             if (valorTopo == posiWhile[i - 1]) {                                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                             }                         }                     }                 }                 if (contgeral == 0) {                     if (flag == 0) {                         estadoFinal = ++n;                         flag = 1;                     }                     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );                 }             }         }         break;     } } ligVertices.append( \"}\" ); System.out.println( ligVertices.toString() ); return ligVertices.toString();  =>   int n = 1; java.lang.String testador; int cont1 = -2; int valorTopo; int valorAtual; int contgeral = -2; int antvalorTopo = 0; int antvalorAtual = 0; int flag = 0; int estadoFinal = 0; int antPosicaoj = 0; int[] posiWhile = new int[10]; int[] posifor = new int[10]; int[] atulposiFor = new int[10]; java.lang.StringBuilder ligVertices = new java.lang.StringBuilder(); ligVertices.append( \"digraph {\\n\" ); int i = 0; int j = 0; Gfc.Pilha st = new Gfc.Pilha(); java.util.Stack pilha = new java.util.Stack(); java.util.StringTokenizer token = new java.util.StringTokenizer( programa ); while (token.hasMoreElements()) {     testador = token.nextElement().toString();     switch (testador) {     case \"boolen\" :         break;     case \"byte\" :         break;     case \"short\" :         break;     case \"int\" :         break;     case \"long\" :         break;     case \"float\" :         break;     case \"double\" :         break;     case \"String\" :         break;     case \"if\" :         n++;         break;     case \"else\" :         n++;         break;     case \"for\" :         n++;         posifor[j] = n;         j++;         break;     case \"while\" :         n++;         posiWhile[i] = n;         i++;         break;     case \"try\" :         n++;         break;     case \"catch\" :         n++;         break;     default  :         if (testador.equals( \"{\" )) {             cont1++;             contgeral++;             if (cont1 > 0) {                 st.inserePilha( pilha, n );             }             antvalorAtual = n;         } else {             if (testador.equals( \"}\" )) {                 contgeral--;                 valorAtual = st.removePilha( pilha );                 valorTopo = st.vertopo( pilha );                 if (valorAtual != 0 && valorTopo != 0) {                     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                     if (j > 0 && posifor[j - 1] != 0) {                         if (valorTopo == posifor[j - 1]) {                             if (antPosicaoj != j) {                                 n++;                                 atulposiFor[j - 1] = n;                                 antPosicaoj = j;                                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                             }                             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                         }                     } else {                         if (i > 0 && posiWhile[i - 1] != 0) {                             if (valorTopo == posiWhile[i - 1]) {                                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                             }                         }                     }                 }                 if (contgeral == 0) {                     if (flag == 0) {                         estadoFinal = ++n;                         flag = 1;                     }                     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );                 }             }         }         break;     } } ligVertices.append( \"}\" ); System.out.println( ligVertices.toString() ); return ligVertices.toString();
SDL_3:71:java.lang.String_recebePrograma(java.lang.String): int n = 1; java.lang.String testador; int cont1 = -2; int valorTopo; int valorAtual; int contgeral = -2; int antvalorTopo = 0; int antvalorAtual = 0; int flag = 0; int estadoFinal = 0; int antPosicaoj = 0; int[] posiWhile = new int[10]; int[] posifor = new int[10]; int[] atulposiFor = new int[10]; java.lang.StringBuilder ligVertices = new java.lang.StringBuilder(); ligVertices.append( \"digraph {\\n\" ); int i = 0; int j = 0; Gfc.Pilha st = new Gfc.Pilha(); java.util.Stack pilha = new java.util.Stack(); st.inserePilha( pilha, 1 ); java.util.StringTokenizer token = new java.util.StringTokenizer( programa ); while (token.hasMoreElements()) {     testador = token.nextElement().toString();     switch (testador) {     case \"boolen\" :         break;     case \"byte\" :         break;     case \"short\" :         break;     case \"int\" :         break;     case \"long\" :         break;     case \"float\" :         break;     case \"double\" :         break;     case \"String\" :         break;     case \"if\" :         n++;         break;     case \"else\" :         n++;         break;     case \"for\" :         n++;         posifor[j] = n;         j++;         break;     case \"while\" :         n++;         posiWhile[i] = n;         i++;         break;     case \"try\" :         n++;         break;     case \"catch\" :         n++;         break;     default  :         if (testador.equals( \"{\" )) {             cont1++;             contgeral++;             if (cont1 > 0) {                 st.inserePilha( pilha, n );             }             antvalorAtual = n;         } else {             if (testador.equals( \"}\" )) {                 contgeral--;                 valorAtual = st.removePilha( pilha );                 valorTopo = st.vertopo( pilha );                 if (valorAtual != 0 && valorTopo != 0) {                     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                     if (j > 0 && posifor[j - 1] != 0) {                         if (valorTopo == posifor[j - 1]) {                             if (antPosicaoj != j) {                                 n++;                                 atulposiFor[j - 1] = n;                                 antPosicaoj = j;                                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                             }                             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                         }                     } else {                         if (i > 0 && posiWhile[i - 1] != 0) {                             if (valorTopo == posiWhile[i - 1]) {                                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                             }                         }                     }                 }                 if (contgeral == 0) {                     if (flag == 0) {                         estadoFinal = ++n;                         flag = 1;                     }                     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );                 }             }         }         break;     } } ligVertices.append( \"}\" ); System.out.println( ligVertices.toString() ); return ligVertices.toString();  =>   int n = 1; java.lang.String testador; int cont1 = -2; int valorTopo; int valorAtual; int contgeral = -2; int antvalorTopo = 0; int antvalorAtual = 0; int flag = 0; int estadoFinal = 0; int antPosicaoj = 0; int[] posiWhile = new int[10]; int[] posifor = new int[10]; int[] atulposiFor = new int[10]; java.lang.StringBuilder ligVertices = new java.lang.StringBuilder(); ligVertices.append( \"digraph {\\n\" ); int i = 0; int j = 0; Gfc.Pilha st = new Gfc.Pilha(); java.util.Stack pilha = new java.util.Stack(); st.inserePilha( pilha, 1 ); java.util.StringTokenizer token = new java.util.StringTokenizer( programa ); ligVertices.append( \"}\" ); System.out.println( ligVertices.toString() ); return ligVertices.toString();
SDL_4:171:java.lang.String_recebePrograma(java.lang.String): int n = 1; java.lang.String testador; int cont1 = -2; int valorTopo; int valorAtual; int contgeral = -2; int antvalorTopo = 0; int antvalorAtual = 0; int flag = 0; int estadoFinal = 0; int antPosicaoj = 0; int[] posiWhile = new int[10]; int[] posifor = new int[10]; int[] atulposiFor = new int[10]; java.lang.StringBuilder ligVertices = new java.lang.StringBuilder(); ligVertices.append( \"digraph {\\n\" ); int i = 0; int j = 0; Gfc.Pilha st = new Gfc.Pilha(); java.util.Stack pilha = new java.util.Stack(); st.inserePilha( pilha, 1 ); java.util.StringTokenizer token = new java.util.StringTokenizer( programa ); while (token.hasMoreElements()) {     testador = token.nextElement().toString();     switch (testador) {     case \"boolen\" :         break;     case \"byte\" :         break;     case \"short\" :         break;     case \"int\" :         break;     case \"long\" :         break;     case \"float\" :         break;     case \"double\" :         break;     case \"String\" :         break;     case \"if\" :         n++;         break;     case \"else\" :         n++;         break;     case \"for\" :         n++;         posifor[j] = n;         j++;         break;     case \"while\" :         n++;         posiWhile[i] = n;         i++;         break;     case \"try\" :         n++;         break;     case \"catch\" :         n++;         break;     default  :         if (testador.equals( \"{\" )) {             cont1++;             contgeral++;             if (cont1 > 0) {                 st.inserePilha( pilha, n );             }             antvalorAtual = n;         } else {             if (testador.equals( \"}\" )) {                 contgeral--;                 valorAtual = st.removePilha( pilha );                 valorTopo = st.vertopo( pilha );                 if (valorAtual != 0 && valorTopo != 0) {                     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                     if (j > 0 && posifor[j - 1] != 0) {                         if (valorTopo == posifor[j - 1]) {                             if (antPosicaoj != j) {                                 n++;                                 atulposiFor[j - 1] = n;                                 antPosicaoj = j;                                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                             }                             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                         }                     } else {                         if (i > 0 && posiWhile[i - 1] != 0) {                             if (valorTopo == posiWhile[i - 1]) {                                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                             }                         }                     }                 }                 if (contgeral == 0) {                     if (flag == 0) {                         estadoFinal = ++n;                         flag = 1;                     }                     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );                 }             }         }         break;     } } ligVertices.append( \"}\" ); System.out.println( ligVertices.toString() ); return ligVertices.toString();  =>   int n = 1; java.lang.String testador; int cont1 = -2; int valorTopo; int valorAtual; int contgeral = -2; int antvalorTopo = 0; int antvalorAtual = 0; int flag = 0; int estadoFinal = 0; int antPosicaoj = 0; int[] posiWhile = new int[10]; int[] posifor = new int[10]; int[] atulposiFor = new int[10]; java.lang.StringBuilder ligVertices = new java.lang.StringBuilder(); ligVertices.append( \"digraph {\\n\" ); int i = 0; int j = 0; Gfc.Pilha st = new Gfc.Pilha(); java.util.Stack pilha = new java.util.Stack(); st.inserePilha( pilha, 1 ); java.util.StringTokenizer token = new java.util.StringTokenizer( programa ); while (token.hasMoreElements()) {     testador = token.nextElement().toString();     switch (testador) {     case \"boolen\" :         break;     case \"byte\" :         break;     case \"short\" :         break;     case \"int\" :         break;     case \"long\" :         break;     case \"float\" :         break;     case \"double\" :         break;     case \"String\" :         break;     case \"if\" :         n++;         break;     case \"else\" :         n++;         break;     case \"for\" :         n++;         posifor[j] = n;         j++;         break;     case \"while\" :         n++;         posiWhile[i] = n;         i++;         break;     case \"try\" :         n++;         break;     case \"catch\" :         n++;         break;     default  :         if (testador.equals( \"{\" )) {             cont1++;             contgeral++;             if (cont1 > 0) {                 st.inserePilha( pilha, n );             }             antvalorAtual = n;         } else {             if (testador.equals( \"}\" )) {                 contgeral--;                 valorAtual = st.removePilha( pilha );                 valorTopo = st.vertopo( pilha );                 if (valorAtual != 0 && valorTopo != 0) {                     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                     if (j > 0 && posifor[j - 1] != 0) {                         if (valorTopo == posifor[j - 1]) {                             if (antPosicaoj != j) {                                 n++;                                 atulposiFor[j - 1] = n;                                 antPosicaoj = j;                                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                             }                             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                         }                     } else {                         if (i > 0 && posiWhile[i - 1] != 0) {                             if (valorTopo == posiWhile[i - 1]) {                                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                             }                         }                     }                 }                 if (contgeral == 0) {                     if (flag == 0) {                         estadoFinal = ++n;                         flag = 1;                     }                     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );                 }             }         }         break;     } } System.out.println( ligVertices.toString() ); return ligVertices.toString();
SDL_5:171:java.lang.String_recebePrograma(java.lang.String): int n = 1; java.lang.String testador; int cont1 = -2; int valorTopo; int valorAtual; int contgeral = -2; int antvalorTopo = 0; int antvalorAtual = 0; int flag = 0; int estadoFinal = 0; int antPosicaoj = 0; int[] posiWhile = new int[10]; int[] posifor = new int[10]; int[] atulposiFor = new int[10]; java.lang.StringBuilder ligVertices = new java.lang.StringBuilder(); ligVertices.append( \"digraph {\\n\" ); int i = 0; int j = 0; Gfc.Pilha st = new Gfc.Pilha(); java.util.Stack pilha = new java.util.Stack(); st.inserePilha( pilha, 1 ); java.util.StringTokenizer token = new java.util.StringTokenizer( programa ); while (token.hasMoreElements()) {     testador = token.nextElement().toString();     switch (testador) {     case \"boolen\" :         break;     case \"byte\" :         break;     case \"short\" :         break;     case \"int\" :         break;     case \"long\" :         break;     case \"float\" :         break;     case \"double\" :         break;     case \"String\" :         break;     case \"if\" :         n++;         break;     case \"else\" :         n++;         break;     case \"for\" :         n++;         posifor[j] = n;         j++;         break;     case \"while\" :         n++;         posiWhile[i] = n;         i++;         break;     case \"try\" :         n++;         break;     case \"catch\" :         n++;         break;     default  :         if (testador.equals( \"{\" )) {             cont1++;             contgeral++;             if (cont1 > 0) {                 st.inserePilha( pilha, n );             }             antvalorAtual = n;         } else {             if (testador.equals( \"}\" )) {                 contgeral--;                 valorAtual = st.removePilha( pilha );                 valorTopo = st.vertopo( pilha );                 if (valorAtual != 0 && valorTopo != 0) {                     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                     if (j > 0 && posifor[j - 1] != 0) {                         if (valorTopo == posifor[j - 1]) {                             if (antPosicaoj != j) {                                 n++;                                 atulposiFor[j - 1] = n;                                 antPosicaoj = j;                                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                             }                             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                         }                     } else {                         if (i > 0 && posiWhile[i - 1] != 0) {                             if (valorTopo == posiWhile[i - 1]) {                                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                             }                         }                     }                 }                 if (contgeral == 0) {                     if (flag == 0) {                         estadoFinal = ++n;                         flag = 1;                     }                     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );                 }             }         }         break;     } } ligVertices.append( \"}\" ); System.out.println( ligVertices.toString() ); return ligVertices.toString();  =>   int n = 1; java.lang.String testador; int cont1 = -2; int valorTopo; int valorAtual; int contgeral = -2; int antvalorTopo = 0; int antvalorAtual = 0; int flag = 0; int estadoFinal = 0; int antPosicaoj = 0; int[] posiWhile = new int[10]; int[] posifor = new int[10]; int[] atulposiFor = new int[10]; java.lang.StringBuilder ligVertices = new java.lang.StringBuilder(); ligVertices.append( \"digraph {\\n\" ); int i = 0; int j = 0; Gfc.Pilha st = new Gfc.Pilha(); java.util.Stack pilha = new java.util.Stack(); st.inserePilha( pilha, 1 ); java.util.StringTokenizer token = new java.util.StringTokenizer( programa ); while (token.hasMoreElements()) {     testador = token.nextElement().toString();     switch (testador) {     case \"boolen\" :         break;     case \"byte\" :         break;     case \"short\" :         break;     case \"int\" :         break;     case \"long\" :         break;     case \"float\" :         break;     case \"double\" :         break;     case \"String\" :         break;     case \"if\" :         n++;         break;     case \"else\" :         n++;         break;     case \"for\" :         n++;         posifor[j] = n;         j++;         break;     case \"while\" :         n++;         posiWhile[i] = n;         i++;         break;     case \"try\" :         n++;         break;     case \"catch\" :         n++;         break;     default  :         if (testador.equals( \"{\" )) {             cont1++;             contgeral++;             if (cont1 > 0) {                 st.inserePilha( pilha, n );             }             antvalorAtual = n;         } else {             if (testador.equals( \"}\" )) {                 contgeral--;                 valorAtual = st.removePilha( pilha );                 valorTopo = st.vertopo( pilha );                 if (valorAtual != 0 && valorTopo != 0) {                     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                     if (j > 0 && posifor[j - 1] != 0) {                         if (valorTopo == posifor[j - 1]) {                             if (antPosicaoj != j) {                                 n++;                                 atulposiFor[j - 1] = n;                                 antPosicaoj = j;                                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                             }                             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                         }                     } else {                         if (i > 0 && posiWhile[i - 1] != 0) {                             if (valorTopo == posiWhile[i - 1]) {                                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                             }                         }                     }                 }                 if (contgeral == 0) {                     if (flag == 0) {                         estadoFinal = ++n;                         flag = 1;                     }                     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );                 }             }         }         break;     } } ligVertices.append( \"}\" ); return ligVertices.toString();
SDL_6:167:java.lang.String_recebePrograma(java.lang.String): testador = token.nextElement().toString(); switch (testador) { case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break; }  =>   switch (testador) { case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break; }
SDL_7:70:java.lang.String_recebePrograma(java.lang.String): testador = token.nextElement().toString(); switch (testador) { case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break; }  =>   testador = token.nextElement().toString();
SDL_8:169:java.lang.String_recebePrograma(java.lang.String): while (token.hasMoreElements()) {     testador = token.nextElement().toString();     switch (testador) {     case \"boolen\" :         break;     case \"byte\" :         break;     case \"short\" :         break;     case \"int\" :         break;     case \"long\" :         break;     case \"float\" :         break;     case \"double\" :         break;     case \"String\" :         break;     case \"if\" :         n++;         break;     case \"else\" :         n++;         break;     case \"for\" :         n++;         posifor[j] = n;         j++;         break;     case \"while\" :         n++;         posiWhile[i] = n;         i++;         break;     case \"try\" :         n++;         break;     case \"catch\" :         n++;         break;     default  :         if (testador.equals( \"{\" )) {             cont1++;             contgeral++;             if (cont1 > 0) {                 st.inserePilha( pilha, n );             }             antvalorAtual = n;         } else {             if (testador.equals( \"}\" )) {                 contgeral--;                 valorAtual = st.removePilha( pilha );                 valorTopo = st.vertopo( pilha );                 if (valorAtual != 0 && valorTopo != 0) {                     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                     if (j > 0 && posifor[j - 1] != 0) {                         if (valorTopo == posifor[j - 1]) {                             if (antPosicaoj != j) {                                 n++;                                 atulposiFor[j - 1] = n;                                 antPosicaoj = j;                                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                             }                             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                         }                     } else {                         if (i > 0 && posiWhile[i - 1] != 0) {                             if (valorTopo == posiWhile[i - 1]) {                                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                             }                         }                     }                 }                 if (contgeral == 0) {                     if (flag == 0) {                         estadoFinal = ++n;                         flag = 1;                     }                     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );                 }             }         }         break;     } }  =>   while (true) {     testador = token.nextElement().toString();     switch (testador) {     case \"boolen\" :         break;     case \"byte\" :         break;     case \"short\" :         break;     case \"int\" :         break;     case \"long\" :         break;     case \"float\" :         break;     case \"double\" :         break;     case \"String\" :         break;     case \"if\" :         n++;         break;     case \"else\" :         n++;         break;     case \"for\" :         n++;         posifor[j] = n;         j++;         break;     case \"while\" :         n++;         posiWhile[i] = n;         i++;         break;     case \"try\" :         n++;         break;     case \"catch\" :         n++;         break;     default  :         if (testador.equals( \"{\" )) {             cont1++;             contgeral++;             if (cont1 > 0) {                 st.inserePilha( pilha, n );             }             antvalorAtual = n;         } else {             if (testador.equals( \"}\" )) {                 contgeral--;                 valorAtual = st.removePilha( pilha );                 valorTopo = st.vertopo( pilha );                 if (valorAtual != 0 && valorTopo != 0) {                     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                     if (j > 0 && posifor[j - 1] != 0) {                         if (valorTopo == posifor[j - 1]) {                             if (antPosicaoj != j) {                                 n++;                                 atulposiFor[j - 1] = n;                                 antPosicaoj = j;                                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                             }                             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                         }                     } else {                         if (i > 0 && posiWhile[i - 1] != 0) {                             if (valorTopo == posiWhile[i - 1]) {                                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                             }                         }                     }                 }                 if (contgeral == 0) {                     if (flag == 0) {                         estadoFinal = ++n;                         flag = 1;                     }                     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );                 }             }         }         break;     } }
SDL_9:72:java.lang.String_recebePrograma(java.lang.String): break;  =>  
SDL_10:75:java.lang.String_recebePrograma(java.lang.String): break;  =>  
SDL_11:78:java.lang.String_recebePrograma(java.lang.String): break;  =>  
SDL_12:81:java.lang.String_recebePrograma(java.lang.String): break;  =>  
SDL_13:84:java.lang.String_recebePrograma(java.lang.String): break;  =>  
SDL_14:87:java.lang.String_recebePrograma(java.lang.String): break;  =>  
SDL_15:90:java.lang.String_recebePrograma(java.lang.String): break;  =>  
SDL_16:93:java.lang.String_recebePrograma(java.lang.String): break;  =>  
SDL_17:97:java.lang.String_recebePrograma(java.lang.String): n++; break;  =>   break;
SDL_18:97:java.lang.String_recebePrograma(java.lang.String): n++; break;  =>   n++;
SDL_19:101:java.lang.String_recebePrograma(java.lang.String): n++; break;  =>   break;
SDL_20:101:java.lang.String_recebePrograma(java.lang.String): n++; break;  =>   n++;
SDL_21:107:java.lang.String_recebePrograma(java.lang.String): n++; posifor[j] = n; j++; break;  =>   posifor[j] = n; j++; break;
SDL_22:107:java.lang.String_recebePrograma(java.lang.String): n++; posifor[j] = n; j++; break;  =>   n++; j++; break;
SDL_23:107:java.lang.String_recebePrograma(java.lang.String): n++; posifor[j] = n; j++; break;  =>   n++; posifor[j] = n; break;
SDL_24:107:java.lang.String_recebePrograma(java.lang.String): n++; posifor[j] = n; j++; break;  =>   n++; posifor[j] = n; j++;
SDL_25:113:java.lang.String_recebePrograma(java.lang.String): n++; posiWhile[i] = n; i++; break;  =>   posiWhile[i] = n; i++; break;
SDL_26:113:java.lang.String_recebePrograma(java.lang.String): n++; posiWhile[i] = n; i++; break;  =>   n++; i++; break;
SDL_27:113:java.lang.String_recebePrograma(java.lang.String): n++; posiWhile[i] = n; i++; break;  =>   n++; posiWhile[i] = n; break;
SDL_28:113:java.lang.String_recebePrograma(java.lang.String): n++; posiWhile[i] = n; i++; break;  =>   n++; posiWhile[i] = n; i++;
SDL_29:117:java.lang.String_recebePrograma(java.lang.String): n++; break;  =>   break;
SDL_30:117:java.lang.String_recebePrograma(java.lang.String): n++; break;  =>   n++;
SDL_31:121:java.lang.String_recebePrograma(java.lang.String): n++; break;  =>   break;
SDL_32:121:java.lang.String_recebePrograma(java.lang.String): n++; break;  =>   n++;
SDL_33:125:java.lang.String_recebePrograma(java.lang.String): if (testador.equals( \"{\" )) {     cont1++;     contgeral++;     if (cont1 > 0) {         st.inserePilha( pilha, n );     }     antvalorAtual = n; } else {     if (testador.equals( \"}\" )) {         contgeral--;         valorAtual = st.removePilha( pilha );         valorTopo = st.vertopo( pilha );         if (valorAtual != 0 && valorTopo != 0) {             ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );             if (j > 0 && posifor[j - 1] != 0) {                 if (valorTopo == posifor[j - 1]) {                     if (antPosicaoj != j) {                         n++;                         atulposiFor[j - 1] = n;                         antPosicaoj = j;                         ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                     }                     ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                 }             } else {                 if (i > 0 && posiWhile[i - 1] != 0) {                     if (valorTopo == posiWhile[i - 1]) {                         ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                     }                 }             }         }         if (contgeral == 0) {             if (flag == 0) {                 estadoFinal = ++n;                 flag = 1;             }             ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );         }     } } break;  =>   break;
SDL_34:165:java.lang.String_recebePrograma(java.lang.String): if (testador.equals( \"{\" )) {     cont1++;     contgeral++;     if (cont1 > 0) {         st.inserePilha( pilha, n );     }     antvalorAtual = n; } else {     if (testador.equals( \"}\" )) {         contgeral--;         valorAtual = st.removePilha( pilha );         valorTopo = st.vertopo( pilha );         if (valorAtual != 0 && valorTopo != 0) {             ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );             if (j > 0 && posifor[j - 1] != 0) {                 if (valorTopo == posifor[j - 1]) {                     if (antPosicaoj != j) {                         n++;                         atulposiFor[j - 1] = n;                         antPosicaoj = j;                         ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                     }                     ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                 }             } else {                 if (i > 0 && posiWhile[i - 1] != 0) {                     if (valorTopo == posiWhile[i - 1]) {                         ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                     }                 }             }         }         if (contgeral == 0) {             if (flag == 0) {                 estadoFinal = ++n;                 flag = 1;             }             ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );         }     } } break;  =>   if (testador.equals( \"{\" )) {     cont1++;     contgeral++;     if (cont1 > 0) {         st.inserePilha( pilha, n );     }     antvalorAtual = n; } else {     if (testador.equals( \"}\" )) {         contgeral--;         valorAtual = st.removePilha( pilha );         valorTopo = st.vertopo( pilha );         if (valorAtual != 0 && valorTopo != 0) {             ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );             if (j > 0 && posifor[j - 1] != 0) {                 if (valorTopo == posifor[j - 1]) {                     if (antPosicaoj != j) {                         n++;                         atulposiFor[j - 1] = n;                         antPosicaoj = j;                         ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                     }                     ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                 }             } else {                 if (i > 0 && posiWhile[i - 1] != 0) {                     if (valorTopo == posiWhile[i - 1]) {                         ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                     }                 }             }         }         if (contgeral == 0) {             if (flag == 0) {                 estadoFinal = ++n;                 flag = 1;             }             ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );         }     } }
SDL_35:130:java.lang.String_recebePrograma(java.lang.String): cont1++; contgeral++; if (cont1 > 0) {     st.inserePilha( pilha, n ); } antvalorAtual = n;  =>   contgeral++; if (cont1 > 0) {     st.inserePilha( pilha, n ); } antvalorAtual = n;
SDL_36:130:java.lang.String_recebePrograma(java.lang.String): cont1++; contgeral++; if (cont1 > 0) {     st.inserePilha( pilha, n ); } antvalorAtual = n;  =>   cont1++; if (cont1 > 0) {     st.inserePilha( pilha, n ); } antvalorAtual = n;
SDL_37:128:java.lang.String_recebePrograma(java.lang.String): cont1++; contgeral++; if (cont1 > 0) {     st.inserePilha( pilha, n ); } antvalorAtual = n;  =>   cont1++; contgeral++; antvalorAtual = n;
SDL_38:130:java.lang.String_recebePrograma(java.lang.String): cont1++; contgeral++; if (cont1 > 0) {     st.inserePilha( pilha, n ); } antvalorAtual = n;  =>   cont1++; contgeral++; if (cont1 > 0) {     st.inserePilha( pilha, n ); }
SDL_39:165:java.lang.String_recebePrograma(java.lang.String): if (testador.equals( \"{\" )) {     cont1++;     contgeral++;     if (cont1 > 0) {         st.inserePilha( pilha, n );     }     antvalorAtual = n; } else {     if (testador.equals( \"}\" )) {         contgeral--;         valorAtual = st.removePilha( pilha );         valorTopo = st.vertopo( pilha );         if (valorAtual != 0 && valorTopo != 0) {             ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );             if (j > 0 && posifor[j - 1] != 0) {                 if (valorTopo == posifor[j - 1]) {                     if (antPosicaoj != j) {                         n++;                         atulposiFor[j - 1] = n;                         antPosicaoj = j;                         ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                     }                     ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                 }             } else {                 if (i > 0 && posiWhile[i - 1] != 0) {                     if (valorTopo == posiWhile[i - 1]) {                         ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                     }                 }             }         }         if (contgeral == 0) {             if (flag == 0) {                 estadoFinal = ++n;                 flag = 1;             }             ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );         }     } }  =>   if (true) {     cont1++;     contgeral++;     if (cont1 > 0) {         st.inserePilha( pilha, n );     }     antvalorAtual = n; } else {     if (testador.equals( \"}\" )) {         contgeral--;         valorAtual = st.removePilha( pilha );         valorTopo = st.vertopo( pilha );         if (valorAtual != 0 && valorTopo != 0) {             ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );             if (j > 0 && posifor[j - 1] != 0) {                 if (valorTopo == posifor[j - 1]) {                     if (antPosicaoj != j) {                         n++;                         atulposiFor[j - 1] = n;                         antPosicaoj = j;                         ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                     }                     ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                 }             } else {                 if (i > 0 && posiWhile[i - 1] != 0) {                     if (valorTopo == posiWhile[i - 1]) {                         ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                     }                 }             }         }         if (contgeral == 0) {             if (flag == 0) {                 estadoFinal = ++n;                 flag = 1;             }             ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );         }     } }
SDL_40:132:java.lang.String_recebePrograma(java.lang.String): if (testador.equals( \"}\" )) {     contgeral--;     valorAtual = st.removePilha( pilha );     valorTopo = st.vertopo( pilha );     if (valorAtual != 0 && valorTopo != 0) {         ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );         if (j > 0 && posifor[j - 1] != 0) {             if (valorTopo == posifor[j - 1]) {                 if (antPosicaoj != j) {                     n++;                     atulposiFor[j - 1] = n;                     antPosicaoj = j;                     ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                 }                 ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );             }         } else {             if (i > 0 && posiWhile[i - 1] != 0) {                 if (valorTopo == posiWhile[i - 1]) {                     ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                 }             }         }     }     if (contgeral == 0) {         if (flag == 0) {             estadoFinal = ++n;             flag = 1;         }         ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );     } }  =>  
SDL_41:128:java.lang.String_recebePrograma(java.lang.String): st.inserePilha( pilha, n );  =>  
SDL_42:130:java.lang.String_recebePrograma(java.lang.String): if (cont1 > 0) {     st.inserePilha( pilha, n ); }  =>   if (true) {     st.inserePilha( pilha, n ); }
SDL_43:162:java.lang.String_recebePrograma(java.lang.String): contgeral--; valorAtual = st.removePilha( pilha ); valorTopo = st.vertopo( pilha ); if (valorAtual != 0 && valorTopo != 0) {     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );     if (j > 0 && posifor[j - 1] != 0) {         if (valorTopo == posifor[j - 1]) {             if (antPosicaoj != j) {                 n++;                 atulposiFor[j - 1] = n;                 antPosicaoj = j;                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );             }             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );         }     } else {         if (i > 0 && posiWhile[i - 1] != 0) {             if (valorTopo == posiWhile[i - 1]) {                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );             }         }     } } if (contgeral == 0) {     if (flag == 0) {         estadoFinal = ++n;         flag = 1;     }     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" ); }  =>   valorAtual = st.removePilha( pilha ); valorTopo = st.vertopo( pilha ); if (valorAtual != 0 && valorTopo != 0) {     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );     if (j > 0 && posifor[j - 1] != 0) {         if (valorTopo == posifor[j - 1]) {             if (antPosicaoj != j) {                 n++;                 atulposiFor[j - 1] = n;                 antPosicaoj = j;                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );             }             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );         }     } else {         if (i > 0 && posiWhile[i - 1] != 0) {             if (valorTopo == posiWhile[i - 1]) {                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );             }         }     } } if (contgeral == 0) {     if (flag == 0) {         estadoFinal = ++n;         flag = 1;     }     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" ); }
SDL_44:162:java.lang.String_recebePrograma(java.lang.String): contgeral--; valorAtual = st.removePilha( pilha ); valorTopo = st.vertopo( pilha ); if (valorAtual != 0 && valorTopo != 0) {     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );     if (j > 0 && posifor[j - 1] != 0) {         if (valorTopo == posifor[j - 1]) {             if (antPosicaoj != j) {                 n++;                 atulposiFor[j - 1] = n;                 antPosicaoj = j;                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );             }             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );         }     } else {         if (i > 0 && posiWhile[i - 1] != 0) {             if (valorTopo == posiWhile[i - 1]) {                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );             }         }     } } if (contgeral == 0) {     if (flag == 0) {         estadoFinal = ++n;         flag = 1;     }     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" ); }  =>   contgeral--; valorTopo = st.vertopo( pilha ); if (valorAtual != 0 && valorTopo != 0) {     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );     if (j > 0 && posifor[j - 1] != 0) {         if (valorTopo == posifor[j - 1]) {             if (antPosicaoj != j) {                 n++;                 atulposiFor[j - 1] = n;                 antPosicaoj = j;                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );             }             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );         }     } else {         if (i > 0 && posiWhile[i - 1] != 0) {             if (valorTopo == posiWhile[i - 1]) {                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );             }         }     } } if (contgeral == 0) {     if (flag == 0) {         estadoFinal = ++n;         flag = 1;     }     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" ); }
SDL_45:162:java.lang.String_recebePrograma(java.lang.String): contgeral--; valorAtual = st.removePilha( pilha ); valorTopo = st.vertopo( pilha ); if (valorAtual != 0 && valorTopo != 0) {     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );     if (j > 0 && posifor[j - 1] != 0) {         if (valorTopo == posifor[j - 1]) {             if (antPosicaoj != j) {                 n++;                 atulposiFor[j - 1] = n;                 antPosicaoj = j;                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );             }             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );         }     } else {         if (i > 0 && posiWhile[i - 1] != 0) {             if (valorTopo == posiWhile[i - 1]) {                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );             }         }     } } if (contgeral == 0) {     if (flag == 0) {         estadoFinal = ++n;         flag = 1;     }     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" ); }  =>   contgeral--; valorAtual = st.removePilha( pilha ); if (valorAtual != 0 && valorTopo != 0) {     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );     if (j > 0 && posifor[j - 1] != 0) {         if (valorTopo == posifor[j - 1]) {             if (antPosicaoj != j) {                 n++;                 atulposiFor[j - 1] = n;                 antPosicaoj = j;                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );             }             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );         }     } else {         if (i > 0 && posiWhile[i - 1] != 0) {             if (valorTopo == posiWhile[i - 1]) {                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );             }         }     } } if (contgeral == 0) {     if (flag == 0) {         estadoFinal = ++n;         flag = 1;     }     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" ); }
SDL_46:143:java.lang.String_recebePrograma(java.lang.String): contgeral--; valorAtual = st.removePilha( pilha ); valorTopo = st.vertopo( pilha ); if (valorAtual != 0 && valorTopo != 0) {     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );     if (j > 0 && posifor[j - 1] != 0) {         if (valorTopo == posifor[j - 1]) {             if (antPosicaoj != j) {                 n++;                 atulposiFor[j - 1] = n;                 antPosicaoj = j;                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );             }             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );         }     } else {         if (i > 0 && posiWhile[i - 1] != 0) {             if (valorTopo == posiWhile[i - 1]) {                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );             }         }     } } if (contgeral == 0) {     if (flag == 0) {         estadoFinal = ++n;         flag = 1;     }     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" ); }  =>   contgeral--; valorAtual = st.removePilha( pilha ); valorTopo = st.vertopo( pilha ); if (contgeral == 0) {     if (flag == 0) {         estadoFinal = ++n;         flag = 1;     }     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" ); }
SDL_47:156:java.lang.String_recebePrograma(java.lang.String): contgeral--; valorAtual = st.removePilha( pilha ); valorTopo = st.vertopo( pilha ); if (valorAtual != 0 && valorTopo != 0) {     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );     if (j > 0 && posifor[j - 1] != 0) {         if (valorTopo == posifor[j - 1]) {             if (antPosicaoj != j) {                 n++;                 atulposiFor[j - 1] = n;                 antPosicaoj = j;                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );             }             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );         }     } else {         if (i > 0 && posiWhile[i - 1] != 0) {             if (valorTopo == posiWhile[i - 1]) {                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );             }         }     } } if (contgeral == 0) {     if (flag == 0) {         estadoFinal = ++n;         flag = 1;     }     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" ); }  =>   contgeral--; valorAtual = st.removePilha( pilha ); valorTopo = st.vertopo( pilha ); if (valorAtual != 0 && valorTopo != 0) {     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );     if (j > 0 && posifor[j - 1] != 0) {         if (valorTopo == posifor[j - 1]) {             if (antPosicaoj != j) {                 n++;                 atulposiFor[j - 1] = n;                 antPosicaoj = j;                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );             }             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );         }     } else {         if (i > 0 && posiWhile[i - 1] != 0) {             if (valorTopo == posiWhile[i - 1]) {                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );             }         }     } }
SDL_48:164:java.lang.String_recebePrograma(java.lang.String): if (testador.equals( \"}\" )) {     contgeral--;     valorAtual = st.removePilha( pilha );     valorTopo = st.vertopo( pilha );     if (valorAtual != 0 && valorTopo != 0) {         ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );         if (j > 0 && posifor[j - 1] != 0) {             if (valorTopo == posifor[j - 1]) {                 if (antPosicaoj != j) {                     n++;                     atulposiFor[j - 1] = n;                     antPosicaoj = j;                     ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                 }                 ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );             }         } else {             if (i > 0 && posiWhile[i - 1] != 0) {                 if (valorTopo == posiWhile[i - 1]) {                     ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                 }             }         }     }     if (contgeral == 0) {         if (flag == 0) {             estadoFinal = ++n;             flag = 1;         }         ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );     } }  =>   if (true) {     contgeral--;     valorAtual = st.removePilha( pilha );     valorTopo = st.vertopo( pilha );     if (valorAtual != 0 && valorTopo != 0) {         ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );         if (j > 0 && posifor[j - 1] != 0) {             if (valorTopo == posifor[j - 1]) {                 if (antPosicaoj != j) {                     n++;                     atulposiFor[j - 1] = n;                     antPosicaoj = j;                     ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                 }                 ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );             }         } else {             if (i > 0 && posiWhile[i - 1] != 0) {                 if (valorTopo == posiWhile[i - 1]) {                     ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                 }             }         }     }     if (contgeral == 0) {         if (flag == 0) {             estadoFinal = ++n;             flag = 1;         }         ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );     } }
SDL_49:154:java.lang.String_recebePrograma(java.lang.String): ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" ); if (j > 0 && posifor[j - 1] != 0) {     if (valorTopo == posifor[j - 1]) {         if (antPosicaoj != j) {             n++;             atulposiFor[j - 1] = n;             antPosicaoj = j;             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );         }         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );     } } else {     if (i > 0 && posiWhile[i - 1] != 0) {         if (valorTopo == posiWhile[i - 1]) {             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );         }     } }  =>   if (j > 0 && posifor[j - 1] != 0) {     if (valorTopo == posifor[j - 1]) {         if (antPosicaoj != j) {             n++;             atulposiFor[j - 1] = n;             antPosicaoj = j;             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );         }         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );     } } else {     if (i > 0 && posiWhile[i - 1] != 0) {         if (valorTopo == posiWhile[i - 1]) {             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );         }     } }
SDL_50:138:java.lang.String_recebePrograma(java.lang.String): ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" ); if (j > 0 && posifor[j - 1] != 0) {     if (valorTopo == posifor[j - 1]) {         if (antPosicaoj != j) {             n++;             atulposiFor[j - 1] = n;             antPosicaoj = j;             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );         }         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );     } } else {     if (i > 0 && posiWhile[i - 1] != 0) {         if (valorTopo == posiWhile[i - 1]) {             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );         }     } }  =>   ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );
SDL_51:156:java.lang.String_recebePrograma(java.lang.String): if (valorAtual != 0 && valorTopo != 0) {     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );     if (j > 0 && posifor[j - 1] != 0) {         if (valorTopo == posifor[j - 1]) {             if (antPosicaoj != j) {                 n++;                 atulposiFor[j - 1] = n;                 antPosicaoj = j;                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );             }             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );         }     } else {         if (i > 0 && posiWhile[i - 1] != 0) {             if (valorTopo == posiWhile[i - 1]) {                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );             }         }     } }  =>   if (true) {     ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );     if (j > 0 && posifor[j - 1] != 0) {         if (valorTopo == posifor[j - 1]) {             if (antPosicaoj != j) {                 n++;                 atulposiFor[j - 1] = n;                 antPosicaoj = j;                 ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );             }             ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );         }     } else {         if (i > 0 && posiWhile[i - 1] != 0) {             if (valorTopo == posiWhile[i - 1]) {                 ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );             }         }     } }
SDL_52:139:java.lang.String_recebePrograma(java.lang.String): if (valorTopo == posifor[j - 1]) {     if (antPosicaoj != j) {         n++;         atulposiFor[j - 1] = n;         antPosicaoj = j;         ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );     }     ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" ); }  =>  
SDL_53:155:java.lang.String_recebePrograma(java.lang.String): if (j > 0 && posifor[j - 1] != 0) {     if (valorTopo == posifor[j - 1]) {         if (antPosicaoj != j) {             n++;             atulposiFor[j - 1] = n;             antPosicaoj = j;             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );         }         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );     } } else {     if (i > 0 && posiWhile[i - 1] != 0) {         if (valorTopo == posiWhile[i - 1]) {             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );         }     } }  =>   if (true) {     if (valorTopo == posifor[j - 1]) {         if (antPosicaoj != j) {             n++;             atulposiFor[j - 1] = n;             antPosicaoj = j;             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );         }         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );     } } else {     if (i > 0 && posiWhile[i - 1] != 0) {         if (valorTopo == posiWhile[i - 1]) {             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );         }     } }
SDL_54:149:java.lang.String_recebePrograma(java.lang.String): if (i > 0 && posiWhile[i - 1] != 0) {     if (valorTopo == posiWhile[i - 1]) {         ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );     } }  =>  
SDL_55:141:java.lang.String_recebePrograma(java.lang.String): if (antPosicaoj != j) {     n++;     atulposiFor[j - 1] = n;     antPosicaoj = j;     ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" ); } ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );  =>   ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );
SDL_56:146:java.lang.String_recebePrograma(java.lang.String): if (antPosicaoj != j) {     n++;     atulposiFor[j - 1] = n;     antPosicaoj = j;     ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" ); } ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );  =>   if (antPosicaoj != j) {     n++;     atulposiFor[j - 1] = n;     antPosicaoj = j;     ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" ); }
SDL_57:148:java.lang.String_recebePrograma(java.lang.String): if (valorTopo == posifor[j - 1]) {     if (antPosicaoj != j) {         n++;         atulposiFor[j - 1] = n;         antPosicaoj = j;         ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );     }     ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" ); }  =>   if (true) {     if (antPosicaoj != j) {         n++;         atulposiFor[j - 1] = n;         antPosicaoj = j;         ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );     }     ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" ); }
SDL_58:144:java.lang.String_recebePrograma(java.lang.String): n++; atulposiFor[j - 1] = n; antPosicaoj = j; ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );  =>   atulposiFor[j - 1] = n; antPosicaoj = j; ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );
SDL_59:144:java.lang.String_recebePrograma(java.lang.String): n++; atulposiFor[j - 1] = n; antPosicaoj = j; ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );  =>   n++; antPosicaoj = j; ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );
SDL_60:144:java.lang.String_recebePrograma(java.lang.String): n++; atulposiFor[j - 1] = n; antPosicaoj = j; ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );  =>   n++; atulposiFor[j - 1] = n; ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );
SDL_61:144:java.lang.String_recebePrograma(java.lang.String): n++; atulposiFor[j - 1] = n; antPosicaoj = j; ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );  =>   n++; atulposiFor[j - 1] = n; antPosicaoj = j;
SDL_62:146:java.lang.String_recebePrograma(java.lang.String): if (antPosicaoj != j) {     n++;     atulposiFor[j - 1] = n;     antPosicaoj = j;     ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" ); }  =>   if (true) {     n++;     atulposiFor[j - 1] = n;     antPosicaoj = j;     ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" ); }
SDL_63:150:java.lang.String_recebePrograma(java.lang.String): if (valorTopo == posiWhile[i - 1]) {     ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" ); }  =>  
SDL_64:154:java.lang.String_recebePrograma(java.lang.String): if (i > 0 && posiWhile[i - 1] != 0) {     if (valorTopo == posiWhile[i - 1]) {         ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );     } }  =>   if (true) {     if (valorTopo == posiWhile[i - 1]) {         ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );     } }
SDL_65:151:java.lang.String_recebePrograma(java.lang.String): ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );  =>  
SDL_66:153:java.lang.String_recebePrograma(java.lang.String): if (valorTopo == posiWhile[i - 1]) {     ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" ); }  =>   if (true) {     ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" ); }
SDL_67:158:java.lang.String_recebePrograma(java.lang.String): if (flag == 0) {     estadoFinal = ++n;     flag = 1; } ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );  =>   ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );
SDL_68:161:java.lang.String_recebePrograma(java.lang.String): if (flag == 0) {     estadoFinal = ++n;     flag = 1; } ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );  =>   if (flag == 0) {     estadoFinal = ++n;     flag = 1; }
SDL_69:163:java.lang.String_recebePrograma(java.lang.String): if (contgeral == 0) {     if (flag == 0) {         estadoFinal = ++n;         flag = 1;     }     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" ); }  =>   if (true) {     if (flag == 0) {         estadoFinal = ++n;         flag = 1;     }     ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" ); }
SDL_70:159:java.lang.String_recebePrograma(java.lang.String): estadoFinal = ++n; flag = 1;  =>   flag = 1;
SDL_71:159:java.lang.String_recebePrograma(java.lang.String): estadoFinal = ++n; flag = 1;  =>   estadoFinal = ++n;
SDL_72:161:java.lang.String_recebePrograma(java.lang.String): if (flag == 0) {     estadoFinal = ++n;     flag = 1; }  =>   if (true) {     estadoFinal = ++n;     flag = 1; }
SDL_73:164:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;
SDL_74:164:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"boolen\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;
SDL_75:164:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"boolen\" :     break; case \"byte\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;
SDL_76:164:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;
SDL_77:164:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;
SDL_78:164:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;
SDL_79:164:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;
SDL_80:164:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;
SDL_81:163:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;
SDL_82:163:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;
SDL_83:161:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;
SDL_84:161:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;
SDL_85:163:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;
SDL_86:163:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;
SDL_87:123:java.lang.String_recebePrograma(java.lang.String): case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break; default  :     if (testador.equals( \"{\" )) {         cont1++;         contgeral++;         if (cont1 > 0) {             st.inserePilha( pilha, n );         }         antvalorAtual = n;     } else {         if (testador.equals( \"}\" )) {             contgeral--;             valorAtual = st.removePilha( pilha );             valorTopo = st.vertopo( pilha );             if (valorAtual != 0 && valorTopo != 0) {                 ligVertices.append( valorTopo + \" -> \" + valorAtual + \"\\n\" );                 if (j > 0 && posifor[j - 1] != 0) {                     if (valorTopo == posifor[j - 1]) {                         if (antPosicaoj != j) {                             n++;                             atulposiFor[j - 1] = n;                             antPosicaoj = j;                             ligVertices.append( atulposiFor[j - 1] + \" -> \" + posifor[j - 1] + \"\\n\" );                         }                         ligVertices.append( valorAtual + \" -> \" + atulposiFor[j - 1] + \"\\n\" );                     }                 } else {                     if (i > 0 && posiWhile[i - 1] != 0) {                         if (valorTopo == posiWhile[i - 1]) {                             ligVertices.append( antvalorAtual + \" -> \" + valorTopo + \"\\n\" );                         }                     }                 }             }             if (contgeral == 0) {                 if (flag == 0) {                     estadoFinal = ++n;                     flag = 1;                 }                 ligVertices.append( valorAtual + \" -> \" + estadoFinal + \"\\n\" );             }         }     }     break;  =>   case \"boolen\" :     break; case \"byte\" :     break; case \"short\" :     break; case \"int\" :     break; case \"long\" :     break; case \"float\" :     break; case \"double\" :     break; case \"String\" :     break; case \"if\" :     n++;     break; case \"else\" :     n++;     break; case \"for\" :     n++;     posifor[j] = n;     j++;     break; case \"while\" :     n++;     posiWhile[i] = n;     i++;     break; case \"try\" :     n++;     break; case \"catch\" :     n++;     break;
SDL_88:172:java.lang.String_recebePrograma(java.lang.String): return ligVertices.toString();  =>   return \"\";
VDL_1:96:java.lang.String_recebePrograma(java.lang.String):n++ =>  
VDL_2:100:java.lang.String_recebePrograma(java.lang.String):n++ =>  
VDL_3:104:java.lang.String_recebePrograma(java.lang.String):n++ =>  
VDL_4:106:java.lang.String_recebePrograma(java.lang.String):j++ =>  
VDL_5:110:java.lang.String_recebePrograma(java.lang.String):n++ =>  
VDL_6:112:java.lang.String_recebePrograma(java.lang.String):i++ =>  
VDL_7:116:java.lang.String_recebePrograma(java.lang.String):n++ =>  
VDL_8:120:java.lang.String_recebePrograma(java.lang.String):n++ =>  
VDL_9:125:java.lang.String_recebePrograma(java.lang.String):cont1++ =>  
VDL_10:126:java.lang.String_recebePrograma(java.lang.String):contgeral++ =>  
VDL_11:127:java.lang.String_recebePrograma(java.lang.String):cont1 > 0 => 0
VDL_12:133:java.lang.String_recebePrograma(java.lang.String):contgeral-- =>  
VDL_13:136:java.lang.String_recebePrograma(java.lang.String):valorAtual != 0 => 0
VDL_14:136:java.lang.String_recebePrograma(java.lang.String):valorTopo != 0 => 0
VDL_15:137:java.lang.String_recebePrograma(java.lang.String):valorTopo + " -> " => " -> "
VDL_16:137:java.lang.String_recebePrograma(java.lang.String):valorTopo + " -> " + valorAtual => valorTopo + " -> "
VDL_17:138:java.lang.String_recebePrograma(java.lang.String):j > 0 => 0
VDL_18:138:java.lang.String_recebePrograma(java.lang.String):j - 1 => 1
VDL_19:138:java.lang.String_recebePrograma(java.lang.String):posifor[j - 1] != 0 => 0
VDL_20:139:java.lang.String_recebePrograma(java.lang.String):j - 1 => 1
VDL_21:139:java.lang.String_recebePrograma(java.lang.String):valorTopo == posifor[j - 1] => posifor[j - 1]
VDL_22:139:java.lang.String_recebePrograma(java.lang.String):valorTopo == posifor[j - 1] => valorTopo
VDL_23:140:java.lang.String_recebePrograma(java.lang.String):antPosicaoj != j => j
VDL_24:140:java.lang.String_recebePrograma(java.lang.String):antPosicaoj != j => antPosicaoj
VDL_25:141:java.lang.String_recebePrograma(java.lang.String):n++ =>  
VDL_26:142:java.lang.String_recebePrograma(java.lang.String):j - 1 => 1
VDL_27:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => 1
VDL_28:144:java.lang.String_recebePrograma(java.lang.String):atulposiFor[j - 1] + " -> " => " -> "
VDL_29:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => 1
VDL_30:144:java.lang.String_recebePrograma(java.lang.String):atulposiFor[j - 1] + " -> " + posifor[j - 1] => atulposiFor[j - 1] + " -> "
VDL_31:146:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " => " -> "
VDL_32:146:java.lang.String_recebePrograma(java.lang.String):j - 1 => 1
VDL_33:146:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " + atulposiFor[j - 1] => valorAtual + " -> "
VDL_34:149:java.lang.String_recebePrograma(java.lang.String):i > 0 => 0
VDL_35:149:java.lang.String_recebePrograma(java.lang.String):i - 1 => 1
VDL_36:149:java.lang.String_recebePrograma(java.lang.String):posiWhile[i - 1] != 0 => 0
VDL_37:150:java.lang.String_recebePrograma(java.lang.String):i - 1 => 1
VDL_38:150:java.lang.String_recebePrograma(java.lang.String):valorTopo == posiWhile[i - 1] => posiWhile[i - 1]
VDL_39:150:java.lang.String_recebePrograma(java.lang.String):valorTopo == posiWhile[i - 1] => valorTopo
VDL_40:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual + " -> " => " -> "
VDL_41:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual + " -> " + valorTopo => antvalorAtual + " -> "
VDL_42:156:java.lang.String_recebePrograma(java.lang.String):contgeral == 0 => 0
VDL_43:157:java.lang.String_recebePrograma(java.lang.String):flag == 0 => 0
VDL_44:158:java.lang.String_recebePrograma(java.lang.String):++n =>  
VDL_45:161:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " => " -> "
VDL_46:161:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " + estadoFinal => valorAtual + " -> "
ODL_1:48:java.lang.String_recebePrograma(java.lang.String):-2 => 2
ODL_2:51:java.lang.String_recebePrograma(java.lang.String):-2 => 2
ODL_3:96:java.lang.String_recebePrograma(java.lang.String):n++ => n
ODL_4:100:java.lang.String_recebePrograma(java.lang.String):n++ => n
ODL_5:104:java.lang.String_recebePrograma(java.lang.String):n++ => n
ODL_6:106:java.lang.String_recebePrograma(java.lang.String):j++ => j
ODL_7:110:java.lang.String_recebePrograma(java.lang.String):n++ => n
ODL_8:112:java.lang.String_recebePrograma(java.lang.String):i++ => i
ODL_9:116:java.lang.String_recebePrograma(java.lang.String):n++ => n
ODL_10:120:java.lang.String_recebePrograma(java.lang.String):n++ => n
ODL_11:125:java.lang.String_recebePrograma(java.lang.String):cont1++ => cont1
ODL_12:126:java.lang.String_recebePrograma(java.lang.String):contgeral++ => contgeral
ODL_13:127:java.lang.String_recebePrograma(java.lang.String):cont1 > 0 => cont1
ODL_14:127:java.lang.String_recebePrograma(java.lang.String):cont1 > 0 => 0
ODL_15:133:java.lang.String_recebePrograma(java.lang.String):contgeral-- => contgeral
ODL_16:136:java.lang.String_recebePrograma(java.lang.String):valorAtual != 0 => valorAtual
ODL_17:136:java.lang.String_recebePrograma(java.lang.String):valorAtual != 0 => 0
ODL_18:136:java.lang.String_recebePrograma(java.lang.String):valorTopo != 0 => valorTopo
ODL_19:136:java.lang.String_recebePrograma(java.lang.String):valorTopo != 0 => 0
ODL_20:136:java.lang.String_recebePrograma(java.lang.String):valorAtual != 0 && valorTopo != 0 => valorAtual != 0
ODL_21:136:java.lang.String_recebePrograma(java.lang.String):valorAtual != 0 && valorTopo != 0 => valorTopo != 0
ODL_22:137:java.lang.String_recebePrograma(java.lang.String):valorTopo + " -> " => valorTopo
ODL_23:137:java.lang.String_recebePrograma(java.lang.String):valorTopo + " -> " => " -> "
ODL_24:137:java.lang.String_recebePrograma(java.lang.String):valorTopo + " -> " + valorAtual => valorTopo + " -> "
ODL_25:137:java.lang.String_recebePrograma(java.lang.String):valorTopo + " -> " + valorAtual => valorAtual
ODL_26:137:java.lang.String_recebePrograma(java.lang.String):valorTopo + " -> " + valorAtual + "\n" => valorTopo + " -> " + valorAtual
ODL_27:137:java.lang.String_recebePrograma(java.lang.String):valorTopo + " -> " + valorAtual + "\n" => "\n"
ODL_28:138:java.lang.String_recebePrograma(java.lang.String):j > 0 => j
ODL_29:138:java.lang.String_recebePrograma(java.lang.String):j > 0 => 0
ODL_30:138:java.lang.String_recebePrograma(java.lang.String):j - 1 => j
ODL_31:138:java.lang.String_recebePrograma(java.lang.String):j - 1 => 1
ODL_32:138:java.lang.String_recebePrograma(java.lang.String):posifor[j - 1] != 0 => posifor[j - 1]
ODL_33:138:java.lang.String_recebePrograma(java.lang.String):posifor[j - 1] != 0 => 0
ODL_34:138:java.lang.String_recebePrograma(java.lang.String):j > 0 && posifor[j - 1] != 0 => j > 0
ODL_35:138:java.lang.String_recebePrograma(java.lang.String):j > 0 && posifor[j - 1] != 0 => posifor[j - 1] != 0
ODL_36:139:java.lang.String_recebePrograma(java.lang.String):j - 1 => j
ODL_37:139:java.lang.String_recebePrograma(java.lang.String):j - 1 => 1
ODL_38:139:java.lang.String_recebePrograma(java.lang.String):valorTopo == posifor[j - 1] => valorTopo
ODL_39:139:java.lang.String_recebePrograma(java.lang.String):valorTopo == posifor[j - 1] => posifor[j - 1]
ODL_40:140:java.lang.String_recebePrograma(java.lang.String):antPosicaoj != j => antPosicaoj
ODL_41:140:java.lang.String_recebePrograma(java.lang.String):antPosicaoj != j => j
ODL_42:141:java.lang.String_recebePrograma(java.lang.String):n++ => n
ODL_43:142:java.lang.String_recebePrograma(java.lang.String):j - 1 => j
ODL_44:142:java.lang.String_recebePrograma(java.lang.String):j - 1 => 1
ODL_45:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => j
ODL_46:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => 1
ODL_47:144:java.lang.String_recebePrograma(java.lang.String):atulposiFor[j - 1] + " -> " => atulposiFor[j - 1]
ODL_48:144:java.lang.String_recebePrograma(java.lang.String):atulposiFor[j - 1] + " -> " => " -> "
ODL_49:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => j
ODL_50:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => 1
ODL_51:144:java.lang.String_recebePrograma(java.lang.String):atulposiFor[j - 1] + " -> " + posifor[j - 1] => atulposiFor[j - 1] + " -> "
ODL_52:144:java.lang.String_recebePrograma(java.lang.String):atulposiFor[j - 1] + " -> " + posifor[j - 1] => posifor[j - 1]
ODL_53:144:java.lang.String_recebePrograma(java.lang.String):atulposiFor[j - 1] + " -> " + posifor[j - 1] + "\n" => atulposiFor[j - 1] + " -> " + posifor[j - 1]
ODL_54:144:java.lang.String_recebePrograma(java.lang.String):atulposiFor[j - 1] + " -> " + posifor[j - 1] + "\n" => "\n"
ODL_55:146:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " => valorAtual
ODL_56:146:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " => " -> "
ODL_57:146:java.lang.String_recebePrograma(java.lang.String):j - 1 => j
ODL_58:146:java.lang.String_recebePrograma(java.lang.String):j - 1 => 1
ODL_59:146:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " + atulposiFor[j - 1] => valorAtual + " -> "
ODL_60:146:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " + atulposiFor[j - 1] => atulposiFor[j - 1]
ODL_61:146:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " + atulposiFor[j - 1] + "\n" => valorAtual + " -> " + atulposiFor[j - 1]
ODL_62:146:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " + atulposiFor[j - 1] + "\n" => "\n"
ODL_63:149:java.lang.String_recebePrograma(java.lang.String):i > 0 => i
ODL_64:149:java.lang.String_recebePrograma(java.lang.String):i > 0 => 0
ODL_65:149:java.lang.String_recebePrograma(java.lang.String):i - 1 => i
ODL_66:149:java.lang.String_recebePrograma(java.lang.String):i - 1 => 1
ODL_67:149:java.lang.String_recebePrograma(java.lang.String):posiWhile[i - 1] != 0 => posiWhile[i - 1]
ODL_68:149:java.lang.String_recebePrograma(java.lang.String):posiWhile[i - 1] != 0 => 0
ODL_69:149:java.lang.String_recebePrograma(java.lang.String):i > 0 && posiWhile[i - 1] != 0 => i > 0
ODL_70:149:java.lang.String_recebePrograma(java.lang.String):i > 0 && posiWhile[i - 1] != 0 => posiWhile[i - 1] != 0
ODL_71:150:java.lang.String_recebePrograma(java.lang.String):i - 1 => i
ODL_72:150:java.lang.String_recebePrograma(java.lang.String):i - 1 => 1
ODL_73:150:java.lang.String_recebePrograma(java.lang.String):valorTopo == posiWhile[i - 1] => valorTopo
ODL_74:150:java.lang.String_recebePrograma(java.lang.String):valorTopo == posiWhile[i - 1] => posiWhile[i - 1]
ODL_75:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual + " -> " => antvalorAtual
ODL_76:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual + " -> " => " -> "
ODL_77:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual + " -> " + valorTopo => antvalorAtual + " -> "
ODL_78:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual + " -> " + valorTopo => valorTopo
ODL_79:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual + " -> " + valorTopo + "\n" => antvalorAtual + " -> " + valorTopo
ODL_80:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual + " -> " + valorTopo + "\n" => "\n"
ODL_81:156:java.lang.String_recebePrograma(java.lang.String):contgeral == 0 => contgeral
ODL_82:156:java.lang.String_recebePrograma(java.lang.String):contgeral == 0 => 0
ODL_83:157:java.lang.String_recebePrograma(java.lang.String):flag == 0 => flag
ODL_84:157:java.lang.String_recebePrograma(java.lang.String):flag == 0 => 0
ODL_85:158:java.lang.String_recebePrograma(java.lang.String):++n => n
ODL_86:161:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " => valorAtual
ODL_87:161:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " => " -> "
ODL_88:161:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " + estadoFinal => valorAtual + " -> "
ODL_89:161:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " + estadoFinal => estadoFinal
ODL_90:161:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " + estadoFinal + "\n" => valorAtual + " -> " + estadoFinal
ODL_91:161:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " + estadoFinal + "\n" => "\n"
CDL_1:48:java.lang.String_recebePrograma(java.lang.String):-2 =>  
CDL_2:51:java.lang.String_recebePrograma(java.lang.String):-2 =>  
CDL_3:127:java.lang.String_recebePrograma(java.lang.String):cont1 > 0 => cont1
CDL_4:136:java.lang.String_recebePrograma(java.lang.String):valorAtual != 0 => valorAtual
CDL_5:136:java.lang.String_recebePrograma(java.lang.String):valorTopo != 0 => valorTopo
CDL_6:137:java.lang.String_recebePrograma(java.lang.String):valorTopo + " -> " => valorTopo
CDL_7:137:java.lang.String_recebePrograma(java.lang.String):valorTopo + " -> " + valorAtual + "\n" => valorTopo + " -> " + valorAtual
CDL_8:138:java.lang.String_recebePrograma(java.lang.String):j > 0 => j
CDL_9:138:java.lang.String_recebePrograma(java.lang.String):j - 1 => j
CDL_10:138:java.lang.String_recebePrograma(java.lang.String):posifor[j - 1] != 0 => posifor[j - 1]
CDL_11:139:java.lang.String_recebePrograma(java.lang.String):j - 1 => j
CDL_12:142:java.lang.String_recebePrograma(java.lang.String):j - 1 => j
CDL_13:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => j
CDL_14:144:java.lang.String_recebePrograma(java.lang.String):atulposiFor[j - 1] + " -> " => atulposiFor[j - 1]
CDL_15:144:java.lang.String_recebePrograma(java.lang.String):j - 1 => j
CDL_16:144:java.lang.String_recebePrograma(java.lang.String):atulposiFor[j - 1] + " -> " + posifor[j - 1] + "\n" => atulposiFor[j - 1] + " -> " + posifor[j - 1]
CDL_17:146:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " => valorAtual
CDL_18:146:java.lang.String_recebePrograma(java.lang.String):j - 1 => j
CDL_19:146:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " + atulposiFor[j - 1] + "\n" => valorAtual + " -> " + atulposiFor[j - 1]
CDL_20:149:java.lang.String_recebePrograma(java.lang.String):i > 0 => i
CDL_21:149:java.lang.String_recebePrograma(java.lang.String):i - 1 => i
CDL_22:149:java.lang.String_recebePrograma(java.lang.String):posiWhile[i - 1] != 0 => posiWhile[i - 1]
CDL_23:150:java.lang.String_recebePrograma(java.lang.String):i - 1 => i
CDL_24:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual + " -> " => antvalorAtual
CDL_25:151:java.lang.String_recebePrograma(java.lang.String):antvalorAtual + " -> " + valorTopo + "\n" => antvalorAtual + " -> " + valorTopo
CDL_26:156:java.lang.String_recebePrograma(java.lang.String):contgeral == 0 => contgeral
CDL_27:157:java.lang.String_recebePrograma(java.lang.String):flag == 0 => flag
CDL_28:161:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " => valorAtual
CDL_29:161:java.lang.String_recebePrograma(java.lang.String):valorAtual + " -> " + estadoFinal + "\n" => valorAtual + " -> " + estadoFinal
